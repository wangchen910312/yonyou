<?xml version="1.0" encoding="UTF-8"?>
<!-- DispatcherServlet application context for Application's web tier. -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:websocket="http://www.springframework.org/schema/websocket"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
        http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.2.xsd">

<!-- osgi 적용 -->
<!--     <context:annotation-config /> -->
<!--     <bean id="sampleOsgiController" class="chn.bhmc.dms.sample.web.SampleOsgiController" /> -->

    <!-- The controllers are autodetected POJOs labeled with the @Controller annotation. -->
    <context:component-scan base-package="able,egovframework,chn.bhmc.dms,com.yonyou" >
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>

    <mvc:resources mapping="/resources/**" location="/resources/" cache-period="10000" />

    <!-- Multipart Resolver
          최대 10메가 바이트(정확히 10메가는 아니지만)까지 업로드가 가능하도록 설정
      -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10485760" />
        <property name="maxInMemorySize" value="10485760" />
    </bean>

<!--     <bean id="webSecurityInterceptor" class="able.com.web.servlet.WebSecurityInterceptor" /> -->

<!-- HandlerMappings 선언 시작 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
<!-- HandlerMappings 선언 끝  -->

<!-- Interceptor 선언 시작 -->
    <mvc:interceptors>
        <bean id="commonInterceptor" class="able.com.web.interceptor.CommonInterceptor">
            <property name="localeParamName" value="lang" />
        </bean>
        <bean id="themeChangeInterceptor" class="org.springframework.web.servlet.theme.ThemeChangeInterceptor">
            <property name="paramName" value="theme" />
        </bean>
        <bean class="org.springframework.mobile.device.DeviceResolverHandlerInterceptor" />
    </mvc:interceptors>
<!-- Interceptor 선언 끝 -->

<!-- HandlerAdapters 선언 시작 -->

    <!--
        URI 와 매핑되는 Contorller 의 메소드를 실행시 파라미터로 존재하는 객체타입에대한 ArgumentResolver를 실행하여 가져온다
        - This bean processes annotated handler methods, applying Application-specific PropertyEditors
        - for request parameter binding. It overrides the default AnnotationMethodHandlerAdapter.
     -->
    <bean class="able.com.web.servlet.HRequestMappingHandlerAdapter">
        <!--
            - ArgumentResolver 처리 우선권
            1. AbleCustomArgumentResolvers
            2. ArgumentResolvers (Spring)
            3. CustomArgumentResolvers
         -->
        <property name="ableCustomArgumentResolvers">
            <list>
                <bean class="able.com.web.context.HMapHandlerMethodArgumentResolver" />
<!--                 <bean class="chn.bhmc.dms.core.web.bind.support.JsonRequestParamsArgumentResolver" /> -->
            </list>
        </property>
        <property name="webBindingInitializer">
            <bean class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
                <property name="conversionService" ref="conversionService" />
                <property name="validator" ref="validator" />
                <property name="propertyEditorRegistrar" ref="propertyEditorRegistrar" />
            </bean>
        </property>
        <!-- true로 설정 시 Session 별로 직렬로 동작 -->
        <property name="synchronizeOnSession" value="false" />
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/plain;charset=UTF-8</value>
                            <value>application/json;charset=UTF-8</value>
                        </list>
                    </property>
                    <property name="objectMapper">
                        <bean class="chn.bhmc.dms.core.support.databind.JsonObjectMapper" >
                            <property name="jsonDateFormatConverter">
                                <bean class="chn.bhmc.dms.web.core.support.databind.SystemConfigJsonDateTimeFormatConverter">
                                    <property name="systemConfigInfoService">
                                        <bean class="chn.bhmc.dms.cmm.sci.service.impl.SystemConfigInfoServiceImpl" />
                                    </property>
                                </bean>
                            </property>
                        </bean>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />

    <bean id="propertyEditorRegistrar" class="able.com.web.bind.CustomPropertyEditorRegistrar" />

    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
    <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
<!-- HandlerAdapter 선언 끝 -->

<!-- ViewResolver 선언 시작 -->
    <bean id="beanNameViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <property name="order" value="0" />
    </bean>

    <!--
        - tiles 적용
    -->
    <bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver"
        p:order="1"
        p:viewClass="org.springframework.web.servlet.view.tiles3.TilesView"/>

    <!--
        - 추가적인 어떤 맵핑 작업을 하지 않고 URL의 상징적인 view 이름을 사용하는 ViewResolver
        - 단순 JSP만 사용할 경우 사용이 가능하다.
        - 보통 해당 클래스를 확장하여 제공하는 별도의 ViewResolver를 사용한다.
        - This bean configures the 'prefix' and 'suffix' properties of
        - InternalResourceViewResolver, which resolves logical view names
        - returned by Controllers. For example, a logical view name of "vets"
        - will be mapped to "/WEB-INF/jsp/vets.jsp".
    -->
    <bean id="urlBasedViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver"
        p:order="2"
        p:viewClass="org.springframework.web.servlet.view.JstlView"
        p:prefix="/WEB-INF/jsp"
        p:suffix=".jsp"/>
<!-- ViewResolver 선언 끝 -->

    <!-- Controller에서 처리 로직이 없이 바로 view로 이동하는 경우에 사용하는 Controller
       DispatcherServlet을 거쳐야 하지만, html 위주의 static한 페이지를 보여줄때 사용
       URL path가 곧 뷰이름이 되며, prefix와 suffix를 지정할수도 있다.
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
            p:prefix="/WEB-INF/jsp/" p:suffix=".jsp" />
     -->
    <bean id="urlFilenameViewController" class="org.springframework.web.servlet.mvc.UrlFilenameViewController"/>


    <!-- 투명차간 웹서비스 테스트 템플릿 설정[한강석] -->
    <bean name="vehicleEnterNotificationWebServiceTemplate"
        class="org.springframework.ws.client.core.WebServiceTemplate">
        <property name="defaultUri" value="http://localhost:8080/bhmc-dms-web/ws/" />
        <property name="marshaller" ref="jaxb2Marshaller" />
        <property name="unmarshaller" ref="jaxb2Marshaller" />
<!--         <property name="interceptors"> -->
<!--             <list> -->
<!--                 <ref local="vehicleEnterNotificationWebServiceSecurityInterceptor" /> -->
<!--             </list> -->
<!--         </property> -->
    </bean>

<!--     <bean id="vehicleEnterNotificationWebServiceSecurityInterceptor" -->
<!--         class="org.springframework.ws.soap.security.wss4j.Wss4jSecurityInterceptor"> -->
<!--         <property name="securementActions" value="UsernameToken" /> -->
<!--         <property name="securementUsername" value="id" /> -->
<!--         <property name="securementPassword" value="password" /> -->
<!--     </bean> -->

</beans>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    SQL File Name : InvestigationDao_SqlMap.xml
    Description : 현재고관리.
    author Ju Won Lee
    since 2016. 1. 20.
    version 1.0
    Modification Information
       since          author              description
    ===========    =============    ===========================
    2016. 01. 20.     Ju Won Lee     최초 생성
-->

<mapper namespace="chn.bhmc.dms.par.stm.service.dao.InvestigationDAO">
    <!-- 재고 실사 정보를 추가한다. -->
    <insert id="insertInvestigationHeader" parameterType="InvestigationVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.insertInvestigationHeader] */
    INSERT INTO PT_0601T
    (
        DLR_CD
        ,STOCK_DD_DOC_NO                <!-- 재고실사문서번호 -->
        ,DOC_STAT_CD                    <!-- 문서상태코드 -->
        ,PLT_CD                         <!-- 센터코드 -->
        ,STRGE_CD                       <!-- 창고코드 -->
        ,STOCK_IVST_PLAN_DT             <!-- 재고조사계획일자 -->
        ,PRSN_ID                        <!-- 담당자ID -->
        ,PRSN_NM                        <!-- 담당자ID -->
        ,STOCK_LOCK_YN                  <!-- 재고통제여부 -->
        ,REMARK                         <!-- 비고  -->
        ,REG_USR_ID
        ,REG_DT
        ,UPDT_USR_ID          --수정자ID
        ,UPDT_DT              --수정일자
    )
    VALUES
    (
        #{dlrCd}
        ,#{stockDdDocNo}
        ,#{docStatCd}
        ,#{pltCd}
        ,#{strgeCd}
        ,#{stockIvstPlanDt}
        ,#{prsnId}
        ,#{prsnNm}
        ,#{stockLockYn}
        ,#{remark}
        ,#{regUsrId}
        ,#{regDt}
        ,#{regUsrId}
        ,#{regDt}
    )
    </insert>

    <!-- insertInvestigationItem. -->
    <insert id="insertInvestigationItem" parameterType="InvestigationItemVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.insertInvestigationItem] */
    INSERT INTO PT_0602T
    (
        DLR_CD
        ,STOCK_DD_DOC_NO
        ,STOCK_DD_DOC_LINE_NO
        ,ITEM_STAT_CD
        ,LOC_CD
        ,ITEM_CD
        ,BOOK_QTY
        ,DD_QTY
        ,UNIT_CD
        ,REASON_CONT
        ,STOCK_ADJ_MVT_DOC_YY_MM
        ,STOCK_ADJ_MVT_DOC_NO
        ,STOCK_ADJ_MVT_DOC_LINE_NO
        ,STRGE_CD
        ,REG_USR_ID
        ,REG_DT
    )
    VALUES
    (
        #{dlrCd}
        ,#{stockDdDocNo}
        ,#{stockDdDocLineNo}
        ,#{itemStatCd}
        ,#{locCd}
        ,#{itemCd}
        ,#{bookQty}
        ,#{ddQty}
        ,#{unitCd}
        ,#{reasonCont}
        ,#{stockAdjMvtDocYyMm}
        ,#{stockAdjMvtDocNo}
        ,#{stockAdjMvtDocLineNo}
        ,#{strgeCd}
        ,#{regUsrId}
        ,sysdate
    )
    </insert>

    <!-- 재고실사  헤더정보를 수정한다(승인요청). -->
    <update id="updateInvestigationApplyReq" parameterType="InvestigationVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.updateInvestigationApplyReq] */
    UPDATE PT_0601T SET
        DOC_STAT_CD = #{docStatCd}                      <!-- 문서상태  -->
        <if test='stockIvstPlanDt != null'>
        ,STOCK_IVST_PLAN_DT = = #{stockIvstPlanDt}      <!-- 재고조사계획일자  -->
        </if>
        <if test='prsnId != null and prsnId != ""'>
        ,PRSN_ID = #{prsnId}                            <!-- 담당자  -->
        </if>
        <if test='prsnNm != null and prsnNm != ""'>
        ,PRSN_NM = #{prsnNm}                            <!-- 담당자명 -->
        </if>
        <if test='remark != null and remark != ""'>
        ,REMARK = #{remark}                             <!-- 비고  -->
        </if>
        ,APPROVE_REQ_DT    = sysdate                    <!--  승인요청일자 -->
        <if test='regDt != null'>
        ,REG_DT = #{regDt}                              <!-- 실사문서생성일자  -->
        </if>
        ,UPDT_USR_ID = #{regUsrId}
        ,UPDT_DT = sysdate
    WHERE DLR_CD = #{dlrCd}
    AND STOCK_DD_DOC_NO = #{stockDdDocNo}               <!-- 재고실사번호 -->
    </update>

    <!-- 재고실사 부품 상세정보를 수정한다. -->
    <update id="updateInvestigationItem" parameterType="InvestigationItemVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.updateInvestigationItem] */
    UPDATE PT_0602T SET
        BOOK_QTY = #{bookQty}                       <!-- 장부수량 -->
        ,DD_QTY = #{ddQty}                          <!-- 실사수량 -->
        ,REASON_CONT = #{reasonCont}                <!-- 사유내용 -->
        ,ITEM_STAT_CD = #{itemStatCd}               <!-- 재고실사부품상태-->
        ,UPDT_USR_ID = #{regUsrId}
        ,UPDT_DT = sysdate
    WHERE DLR_CD = #{dlrCd}
    AND STOCK_DD_DOC_NO = #{stockDdDocNo}           <!-- 재고실사번호 -->
    AND STOCK_DD_DOC_LINE_NO = #{stockDdDocLineNo}  <!-- 재고실사라인번호 -->
    </update>

    <!-- 재고실사 부품 정보를 삭제한다.(등록확정전) -->
    <delete id="deleteInvestigationItem" parameterType="InvestigationItemVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.deleteInvestigationItem] */
    DELETE FROM PT_0602T
    WHERE DLR_CD = #{dlrCd}
    AND STOCK_DD_DOC_NO = #{stockDdDocNo}           <!-- 재고실사번호 -->
    <if test='stockDdDocLineNo != null and stockDdDocLineNo != 0'>
    AND STOCK_DD_DOC_LINE_NO = #{stockDdDocLineNo}  <!-- 재고실사라인번호 -->
    </if>
    </delete>

    <!-- 재고실사 부품 정보를 수정한다.(상태완료) -->
    <update id="updateInvestigationItemStat" parameterType="InvestigationItemVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.updateInvestigationItemStat] */
    UPDATE PT_0602T SET
        ITEM_STAT_CD = #{itemStatCd}                <!-- 재고실사부품상태 -->
        ,UPDT_USR_ID = #{regUsrId}
        ,UPDT_DT = sysdate
    WHERE DLR_CD = #{dlrCd}
    AND STOCK_DD_DOC_NO = #{stockDdDocNo}           <!-- 재고실사번호 -->
    AND STOCK_DD_DOC_LINE_NO = #{stockDdDocLineNo}  <!-- 재고실사라인번호 -->
    </update>

    <!-- 재고실사 부품 정보를 수정한다.(상태완료) -->
    <update id="updateInvestigationAllItemStat" parameterType="InvestigationItemVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.updateInvestigationAllItemStat] */
    UPDATE PT_0602T SET
         ITEM_STAT_CD = #{itemStatCd}                <!-- 재고실사부품상태 -->
        ,UPDT_USR_ID = #{regUsrId}
        ,UPDT_DT = SYSDATE
    WHERE DLR_CD = #{dlrCd}
    AND STOCK_DD_DOC_NO = #{stockDdDocNo}           <!-- 재고실사번호 -->
    </update>

    <!-- 재고실사 부품 정보를 수정한다.(수불정보) -->
    <update id="updateInvestigationItemMvtInfo" parameterType="InvestigationItemVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.updateInvestigationItemMvtInfo] */
    UPDATE PT_0602T SET
        STOCK_ADJ_MVT_DOC_YY_MM = #{stockAdjMvtDocYyMm}         <!-- 수불년월 -->
        ,STOCK_ADJ_MVT_DOC_NO = #{stockAdjMvtDocNo}             <!-- 수불문서 -->
        ,STOCK_ADJ_MVT_DOC_LINE_NO = #{stockAdjMvtDocLineNo}    <!-- 수불라인 -->
        ,UPDT_USR_ID = #{regUsrId}
        ,UPDT_DT = sysdate
    WHERE DLR_CD = #{dlrCd}
    AND STOCK_DD_DOC_NO = #{stockDdDocNo}                       <!-- 재고실사번호 -->
    AND STOCK_DD_DOC_LINE_NO = #{stockDdDocLineNo}              <!-- 재고실사라인번호 -->
    </update>

    <!-- 재고실사정보 상태를 변경한다. -->
    <update id="updateInvestigationStat" parameterType="InvestigationVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.updateInvestigationStat] */
    UPDATE PT_0601T SET
        DOC_STAT_CD = #{docStatCd}              <!-- 문서상태 -->
        ,UPDT_USR_ID = #{regUsrId}
        ,UPDT_DT = sysdate
    WHERE DLR_CD = #{dlrCd}
    AND STOCK_DD_DOC_NO = #{stockDdDocNo}       <!-- 재고실사번호 -->
    </update>

    <!-- 재고실사  정보 등록을 확정한다. -->
    <update id="updateInvestigationRegCnfm" parameterType="InvestigationVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.updateInvestigationRegCnfm] */
    UPDATE PT_0601T SET
         DOC_STAT_CD = #{docStatCd}          <!-- 문서상태 -->
        ,STOCK_IVST_PLAN_DT = sysdate       <!-- 확정일자 -->
        ,STOCK_LOCK_YN = #{stockLockYn}     <!-- 재고통제여부 -->
        ,PRSN_ID = #{prsnId}                <!-- 재고실사담당자 -->
        ,PRSN_NM = #{prsnNm}                <!-- 재고실사담당자 -->
        ,UPDT_USR_ID = #{regUsrId}
        ,UPDT_DT = sysdate
    WHERE DLR_CD = #{dlrCd}
    AND STOCK_DD_DOC_NO = #{stockDdDocNo}   <!-- 재고실사번호 -->
    </update>

    <!-- 재고실사  정보 상태를 변경한다.(반려) -->
    <update id="updateInvestigationReject" parameterType="InvestigationVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.updateInvestigationReject] */
    UPDATE PT_0601T SET
        DOC_STAT_CD = #{docStatCd}          <!-- 문서상태 -->
        ,CANC_DT = sysdate                  <!-- 반려일자 -->
        ,UPDT_USR_ID = #{regUsrId}
        ,UPDT_DT = sysdate
    WHERE DLR_CD = #{dlrCd}
    AND STOCK_DD_DOC_NO = #{stockDdDocNo}   <!-- 재고실사번호 -->
    </update>

    <!-- 재고실사  정보 상태를 변경한다.(승인) -->
    <update id="updateInvestigationApplyCnfm" parameterType="InvestigationVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.updateInvestigationApplyCnfm] */
    UPDATE PT_0601T SET
        DOC_STAT_CD = #{docStatCd}           <!-- 문서상태코드 -->
        ,END_DT = sysdate                    <!-- 완료일자 -->
        ,UPDT_USR_ID = #{regUsrId}
        ,UPDT_DT = sysdate
    WHERE DLR_CD = #{dlrCd}
    AND STOCK_DD_DOC_NO = #{stockDdDocNo}    <!-- 재고실사문서번호 -->
    </update>

    <!-- 재고실사  정보 수정일자를 변경한다. -->
    <update id="updateInvestigationUpdtDt" parameterType="InvestigationVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.updateInvestigationUpdtDt] */
    UPDATE PT_0601T SET
         UPDT_USR_ID = #{regUsrId}
        ,UPDT_DT = sysdate
    WHERE DLR_CD = #{dlrCd}
    AND STOCK_DD_DOC_NO = #{stockDdDocNo}    <!-- 재고실사문서번호 -->
    </update>

    <!-- 재고 실사 문서 정보를 조회한다. -->
    <select id="selectInvestigationByKey" parameterType="InvestigationSearchVO" resultType="InvestigationItemVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationTargetItemsByKey] */
    SELECT
        A.*
    FROM
    (
        SELECT
            ROW_NUMBER() OVER(ORDER BY T.DLR_CD ASC ,T.STOCK_DD_DOC_NO ASC ,T.STOCK_DD_DOC_LINE_NO ASC) AS RNUM
            ,T.*
            ,CASE WHEN T.BOOK_QTY <![CDATA[>]]> 0 THEN T.DD_QTY - T.BOOK_QTY
            ELSE T.DD_QTY + T.BOOK_QTY
            END DIFF_QTY <!-- 차이수량 -->
            ,CASE WHEN T.BOOK_QTY <![CDATA[>]]> 0 THEN ROUND((NVL(T.DD_QTY,0) - NVL(T.BOOK_QTY,0)) * NVL(T.MOVING_AVG_PRC,0),2)
            ELSE ROUND((NVL(T.DD_QTY,0) + NVL(T.BOOK_QTY,0)) * NVL(T.MOVING_AVG_PRC,0),2)
            END AS AMT <!-- 차이금액 -->
        FROM(
            SELECT
                A.DLR_CD
                ,C.SPYR_CD AS BP_TP
                ,A.STOCK_DD_DOC_NO
                ,A.STOCK_DD_DOC_LINE_NO
                ,D.STRGE_CD
                ,A.LOC_CD
                ,F.LOC_CD_MIG
                ,A.ITEM_CD
                ,A.ITEM_STAT_CD
                ,C.ITEM_NM
                ,C.ITEM_DSTIN_CD
                ,C.CARLINE_CD
                ,C.ABC_IND
                ,C.LAST_GR_DT
                ,C.LAST_GI_DT
                ,CASE WHEN NVL(A.BOOK_QTY, -999) = -999 THEN (NVL(D.AVLB_STOCK_QTY,0) + NVL(D.RESV_STOCK_QTY,0) -  NVL(D.BORROW_QTY,0) + NVL(D.RENT_QTY,0))<!-- 장부수량 장면수량 대체 -->
                ELSE NVL(A.BOOK_QTY, 0)
                END BOOK_QTY<!-- 장부수량 -->
                ,CASE WHEN A.DD_QTY IS NULL THEN (NVL(D.AVLB_STOCK_QTY,0) + NVL(D.RESV_STOCK_QTY,0) -  NVL(D.BORROW_QTY,0) + NVL(D.RENT_QTY,0))<!-- 장면수량-->
                ELSE A.DD_QTY
                END AS DD_QTY<!-- 실사수량 -->
                ,CASE WHEN A.DD_QTY IS NULL THEN 0
                ELSE
                    CASE WHEN (A.DD_QTY - A.BOOK_QTY) <![CDATA[>]]> 0 THEN (A.DD_QTY - A.BOOK_QTY)
                    ELSE 0
                    END
                END AS STOCK_ITEM_PLUS_QTY<!-- 손익수량 -->
                ,CASE WHEN A.DD_QTY IS NULL THEN 0
                ELSE
                    CASE WHEN (A.DD_QTY - A.BOOK_QTY) <![CDATA[>]]> 0 THEN ROUND((A.DD_QTY - A.BOOK_QTY) * NVL(E.MOVING_AVG_PRC, NVL(C.MOVING_AVG_PRC,0)), 2)
                    ELSE 0
                    END
                END AS STOCK_ITEM_PLUS_PRC<!-- 손익금액 -->
                ,CASE WHEN A.DD_QTY IS NULL THEN 0
                ELSE
                    CASE WHEN (A.DD_QTY - A.BOOK_QTY) <![CDATA[<]]> 0 THEN ((A.DD_QTY - A.BOOK_QTY) * -1)
                    ELSE 0
                    END
                END AS STOCK_ITEM_MINUS_QTY<!-- 손실수량 -->
                ,CASE WHEN A.DD_QTY IS NULL THEN 0
                ELSE
                    CASE WHEN (A.DD_QTY - A.BOOK_QTY) <![CDATA[<]]> 0 THEN ROUND(((A.DD_QTY - A.BOOK_QTY) * -1) * NVL(E.MOVING_AVG_PRC, NVL(C.MOVING_AVG_PRC,0)), 2)
                    ELSE 0
                    END
                END AS STOCK_ITEM_MINUS_PRC<!-- 손실금액 -->
                ,NVL(E.MOVING_AVG_PRC, NVL(C.MOVING_AVG_PRC,0)) AS MOVING_AVG_PRC<!-- 이동평균단가 -->
                ,A.UNIT_CD
                ,NVL(A.REASON_CONT, ' ') AS REASON_CONT
                ,NVL(D.AVLB_STOCK_QTY,0) + NVL(D.RESV_STOCK_QTY,0) -  NVL(D.BORROW_QTY,0) + NVL(D.RENT_QTY,0) AS STOCK_QTY
                ,NVL(D.AVLB_STOCK_QTY,0) AS AVLB_STOCK_QTY
                ,NVL(D.RESV_STOCK_QTY,0) AS RESV_STOCK_QTY
                ,NVL(D.CLAM_STOCK_QTY,0) AS CLAM_STOCK_QTY
                ,NVL(D.GR_SCHE_QTY,0) AS GR_SCHE_QTY
                ,NVL(D.GI_SCHE_QTY,0) AS GI_SCHE_QTY
                ,NVL(D.BORROW_QTY,0) AS BORROW_QTY
                ,NVL(D.RENT_QTY,0) AS RENT_QTY
            FROM PT_0602T A
            INNER JOIN DMSDB.PT_0601T B ON B.DLR_CD = A.DLR_CD AND B.STOCK_DD_DOC_NO = A.STOCK_DD_DOC_NO
            INNER JOIN DMSDB.PT_0201T C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
            LEFT JOIN PT_0301T D ON A.DLR_CD = D.DLR_CD AND A.STRGE_CD = D.STRGE_CD AND A.ITEM_CD = D.ITEM_CD
            LEFT JOIN PT_0208T E ON A.DLR_CD  = E.DLR_CD AND A.STRGE_CD = E.STRGE_CD AND A.ITEM_CD = E.ITEM_CD
            LEFT JOIN PT_0224T F ON A.DLR_CD = F.DLR_CD AND A.STRGE_CD = F.STRGE_CD AND A.ITEM_CD = F.ITEM_CD
            WHERE A.DLR_CD = #{sDlrCd}
            AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo}
            <if test='sRejectYn != null and sRejectYn != ""'>
                <if test='sRejectYn == "Y"'>    <!-- 반려여부 -->
                    AND A.ITEM_STAT_CD = 'RJCT'
                </if >
                <if test='sRejectYn == "N"'>    <!-- 반려여부 -->
                    AND A.ITEM_STAT_CD != 'RJCT'
                </if>
            </if>
            AND A.ITEM_STAT_CD != 'DEL'
        )T
        <where>
            <if test='sAddDiffYn != null and sAddDiffYn != ""'>
            <choose>
                <when test='sAddDiffYn == "Y"'> <!-- 손익손실구분자  : 손익 -->
                    (T.DD_QTY - T.BOOK_QTY) <![CDATA[>]]> 0
                </when>
                <when test='sAddDiffYn == "N"'> <!-- 손익손실구분자 : 손실 -->
                    (T.DD_QTY - T.BOOK_QTY) <![CDATA[<]]> 0
                </when>
                <otherwise>
                    (T.DD_QTY - T.BOOK_QTY) IS NOT NULL
                </otherwise>
            </choose>
            </if>
        </where>
    ) A
    <where>
    <if test='firstIndex != -1 and lastIndex != -1'>
        RNUM <![CDATA[<=]]> #{lastIndex} AND RNUM <![CDATA[>]]> #{firstIndex}
    </if>
    </where>

    </select>

    <!-- 재고 실사 문서 정보 Count를 조회한다. -->
    <select id="selectInvestigationByKeyCnt" resultType="int" parameterType="InvestigationSearchVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationByKeyCnt] */
    SELECT
        COUNT(*)
    FROM PT_0602T A
    INNER JOIN DMSDB.PT_0601T B ON B.DLR_CD = A.DLR_CD AND B.STOCK_DD_DOC_NO = A.STOCK_DD_DOC_NO
    INNER JOIN DMSDB.PT_0201T C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
    INNER JOIN PT_0301T D ON A.DLR_CD = D.DLR_CD AND A.STRGE_CD = D.STRGE_CD AND A.ITEM_CD  = D.ITEM_CD
    WHERE A.DLR_CD = #{sDlrCd}
    AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo}
    <if test='sRejectYn != null and sRejectYn != ""'>
        <if test='sRejectYn == "Y"'>    <!-- 반려여부 -->
        AND A.ITEM_STAT_CD = 'RJCT'
        </if >
        <if test='sRejectYn == "N"'>    <!-- 반려여부 -->
        AND A.ITEM_STAT_CD != 'RJCT'
        </if>
    </if>
    <if test='sAddDiffYn != null and sAddDiffYn != ""'>
    <choose>
        <when test='sAddDiffYn == "Y"'> <!-- 손익손실구분자  : 손익 -->
        AND (A.DD_QTY - A.BOOK_QTY) <![CDATA[>]]> 0
        </when>
        <when test='sAddDiffYn == "N"'> <!-- 손익손실구분자 : 손실 -->
        AND (A.DD_QTY - A.BOOK_QTY) <![CDATA[<]]> 0
        </when>
        <otherwise>
        AND (A.DD_QTY - A.BOOK_QTY) IS NOT NULL
        </otherwise>
    </choose>
    </if>
    AND A.ITEM_STAT_CD != 'DEL'
    </select>

     <!-- 재고 실사 문서 정보를 조회한다. -->
    <select id="selectInvestigationListByCondition" resultType="InvestigationVO" parameterType="InvestigationSearchVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationListByCondition] */
    SELECT * FROM (
        SELECT
            ROWNUM AS RNUM
           ,T1.*
        FROM
        (
            SELECT
                 A.DLR_CD
                ,A.STOCK_DD_DOC_NO
                ,A.DOC_STAT_CD
                ,A.PLT_CD
                ,A.STRGE_CD
                ,A.PRSN_ID
                ,A.PRSN_NM
                ,A.STOCK_LOCK_YN            <!-- 재고통제여부 -->
                ,A.APPROVE_REQ_DT           <!-- 승인요청일자-->
                ,A.END_DT                   <!-- 완료일자 -->
                ,A.CANC_DT                  <!-- 반려일자 -->
                ,A.REG_DT
                ,A.SIGN_OPN_CONT            <!-- 결재의견내용 -->
                ,A.REMARK
                ,B.STOCK_QTY
                ,B.STOCK_PRICE
                ,A.REG_USR_ID
                ,U.USR_NM AS UPDT_USR_ID
                ,TO_CHAR(NVL(A.UPDT_DT,A.REG_DT), 'YYYYMMDDHH24MISS') AS UPDT_DT_STR
            FROM PT_0601T A
            LEFT JOIN
            (
                SELECT
                    A.DLR_CD
                    ,A.STOCK_DD_DOC_NO
                    ,COUNT(*) CNT
                    ,SUM(A.BOOK_QTY) AS STOCK_QTY
                    ,SUM(A.BOOK_QTY * NVL(B.MOVING_AVG_PRC,0)) AS STOCK_PRICE
                    ,MAX(
                        CASE A.ITEM_STAT_CD WHEN 'REDY' THEN 1
                                            WHEN 'RGST' THEN 2
                                            WHEN 'REQ'  THEN 3
                                            WHEN 'RJCT' THEN 4
                                            ELSE 5
                                            END
                    ) AS ITEM_STAT_CD
                FROM PT_0602T A
                LEFT JOIN PT_0208T B ON A.DLR_CD = B.DLR_CD AND A.STRGE_CD = B.STRGE_CD AND A.ITEM_CD = B.ITEM_CD
                WHERE A.DLR_CD = #{sDlrCd}
                AND A.STOCK_ADJ_MVT_DOC_NO IS NULL
                AND A.ITEM_STAT_CD != 'DEL'
                GROUP BY A.DLR_CD, A.STOCK_DD_DOC_NO
            ) B ON A.DlR_CD = B.DlR_CD AND A.STOCK_DD_DOC_NO = B.STOCK_DD_DOC_NO
            LEFT JOIN CM_0801T U ON A.DLR_CD = U.DLR_CD AND A.UPDT_USR_ID = U.USR_ID
            WHERE A.DLR_CD = #{sDlrCd}
            <if test='sStockDdDocNo != null and sStockDdDocNo != ""'> AND A.STOCK_DD_DOC_NO LIKE '%'||#{sStockDdDocNo}||'%' </if>
            <if test='sDocStatCd != null and sDocStatCd != ""'> AND A.DOC_STAT_CD = #{sDocStatCd} </if>
            <if test='sStrgeCd != null and sStrgeCd != ""'> AND A.STRGE_CD = #{sStrgeCd} </if>
            <if test='sPrsnId != null and sPrsnId != ""'> AND A.PRSN_ID  LIKE '%'|| #{sPrsnId} ||'%' </if>
            <if test='sPrsnNm != null and sPrsnNm != ""'> AND A.PRSN_NM  LIKE '%'|| #{sPrsnNm} ||'%' </if>
            <if test='sRegDt != null and sRegDt != ""'> AND A.REG_DT = #{sRegDt} </if>
            <if test='sDocStatCdLst != null and !sDocStatCdLst.isEmpty'> AND B.ITEM_STAT_CD <![CDATA[<]]> 2 </if> <!-- 문서상태 REDY(준비)만  -->
            <if test='sApproveReqDtFr != null'>
                AND A.APPROVE_REQ_DT <![CDATA[>=]]> #{sApproveReqDtFr}
            </if>
            <if test='sApproveReqDtTo != null'>
                AND A.APPROVE_REQ_DT <![CDATA[<=]]> #{sApproveReqDtTo} + 1
            </if>
            <if test='sEndFrDt != null'>
                AND A.END_DT <![CDATA[>=]]> #{sEndFrDt}
            </if>
            <if test='sEndToDt != null'>
                AND A.END_DT <![CDATA[<=]]> #{sEndToDt} + 1
            </if>
            <if test='sRegDtFr != null'>
                AND A.REG_DT <![CDATA[>=]]> #{sRegDtFr}
            </if>
            <if test='sRegDtTo != null'>
                AND A.REG_DT <![CDATA[<=]]> #{sRegDtTo} + 1
            </if>
            AND A.DOC_STAT_CD != 'DEL'
            ORDER BY
            <choose>
            <when test='sort != null'>
             <foreach item="item" index="index" collection="sort" open="" separator="," close="">
                 <choose>
                     <when test='item.field == "dlrCd"'> A.DLR_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                     <when test='item.field == "stockDdDocNo"'> A.STOCK_DD_DOC_NO <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                     <when test='item.field == "docStatCd"'> A.DOC_STAT_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                     <when test='item.field == "strgeCd"'> A.STRGE_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                     <when test='item.field == "prsnId"'> A.PRSN_ID <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                     <when test='item.field == "prsnNm"'> A.PRSN_NM <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                     <when test='item.field == "approveReqDt"'> A.APPROVE_REQ_DT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                     <when test='item.field == "endDt"'> A.END_DT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                     <when test='item.field == "cancDt"'> A.CANC_DT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                     <otherwise>
                     A.DLR_CD ASC ,A.STOCK_DD_DOC_NO DESC
                     </otherwise>
                 </choose>
             </foreach>
            </when>
            <otherwise>
            A.DLR_CD ASC ,A.STOCK_DD_DOC_NO DESC
            </otherwise>
            </choose>
        ) T1
    )
    <where>
    <if test='firstIndex != -1 and lastIndex != -1'>
        RNUM <![CDATA[<=]]> #{lastIndex} AND RNUM <![CDATA[>]]> #{firstIndex}
    </if>
    </where>
    </select>

    <!-- 재고 실사 문서 정보 Count를 조회한다. -->
    <select id="selectInvestigationListByConditionCnt" resultType="int" parameterType="InvestigationSearchVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationListByConditionCnt] */
    SELECT
        COUNT(*)
    FROM PT_0601T A
    LEFT JOIN
    (
        SELECT
            DLR_CD
            ,STOCK_DD_DOC_NO
            ,COUNT(*) CNT
        FROM PT_0602T
        WHERE DLR_CD = #{sDlrCd}
        AND STOCK_ADJ_MVT_DOC_NO IS NULL
        AND ITEM_STAT_CD != 'DEL'
        GROUP BY DLR_CD, STOCK_DD_DOC_NO
    ) B ON A.DLR_CD = B.DLR_CD AND A.STOCK_DD_DOC_NO = B.STOCK_DD_DOC_NO
    WHERE A.DLR_CD = #{sDlrCd}
    <if test='sStockDdDocNo != null and sStockDdDocNo != ""'> AND A.STOCK_DD_DOC_NO LIKE '%'||#{sStockDdDocNo}||'%' </if>
    <if test='sDocStatCd != null and sDocStatCd != ""'> AND A.DOC_STAT_CD = #{sDocStatCd} </if>
    <if test='sStrgeCd != null and sStrgeCd != ""'> AND A.STRGE_CD = #{sStrgeCd} </if>
    <if test='sPrsnId != null and sPrsnId != ""'> AND A.PRSN_ID  LIKE '%'|| #{sPrsnId} ||'%' </if>
    <if test='sPrsnNm != null and sPrsnNm != ""'> AND A.PRSN_NM  LIKE '%'|| #{sPrsnNm} ||'%' </if>
    <if test='sRegDt != null and sRegDt != ""'> AND A.REG_DT = #{sRegDt} </if>
    <if test='sDocStatCdLst != null and !sDocStatCdLst.isEmpty'> AND A.DOC_STAT_CD IN
        <foreach item="item" index="index" collection="sDocStatCdLst" open="(" separator="," close=")">
           #{item}
        </foreach>
    </if>
    <if test='sApproveReqDtFr != null'>
        AND A.APPROVE_REQ_DT <![CDATA[>=]]> #{sApproveReqDtFr}
    </if>
    <if test='sApproveReqDtTo != null'>
        AND A.APPROVE_REQ_DT <![CDATA[<=]]> #{sApproveReqDtTo} + 1
    </if>
    <if test='sRegDtFr != null'>
        AND A.REG_DT <![CDATA[>=]]> #{sRegDtFr}
    </if>
    <if test='sRegDtTo != null'>
        AND A.REG_DT <![CDATA[<=]]> #{sRegDtTo} + 1
    </if>
    </select>

    <!-- 재고 실사 문서 정보를 조회한다. -->
    <select id="selectInvestigationListByKey" resultType="InvestigationVO" parameterType="InvestigationSearchVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationListByKey] */
    SELECT
        A.DLR_CD
        ,A.STOCK_DD_DOC_NO
        ,A.DOC_STAT_CD
        ,A.PLT_CD
        ,A.STRGE_CD
        ,A.STOCK_IVST_PLAN_DT
        ,A.PRSN_ID
        ,A.PRSN_NM
        ,A.STOCK_LOCK_YN
        ,A.APPROVE_REQ_DT
        ,A.END_DT
        ,A.CANC_DT
        ,A.REG_DT
        ,A.SIGN_OPN_CONT
        ,A.REMARK
        ,U.USR_NM AS REG_USR_NM
        ,TO_CHAR(NVL(A.UPDT_DT,A.REG_DT), 'YYYYMMDDHH24MISS') AS UPDT_DT_STR
    FROM PT_0601T A
    LEFT JOIN CM_0801T U ON A.DLR_CD = U.DLR_CD AND A.REG_USR_ID = U.USR_ID
    WHERE A.DLR_CD = #{sDlrCd}
    AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo} <!-- 재고실사문서번호 -->
    </select>

    <!-- 재고 실사 현황 Count를 조회한다. -->
    <select id="selectInvestigationListGridByConditionCnt" resultType="int" parameterType="InvestigationSearchVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationListGridByConditionCnt] */
    SELECT
        COUNT(*)
        FROM (
                SELECT  T1.*
                FROM
                (
                    SELECT
                        A.AGREEMENTITEM         <!-- 승인ITEM -->
                        ,A.AGREEMENTQTY         <!-- 승인QTY -->
                        ,A.AGREEMENTAMT         <!-- 승인AMT -->
                        ,A.APPROVEITEM          <!-- 승인요청ITEM -->
                        ,A.APPROVEQTY           <!-- 승인요청QTY -->
                        ,A.APPROVEAMT           <!-- 승인요청AMT -->
                        ,A.INPUTITEM            <!-- 등록ITEM -->
                        ,A.INPUTQTY             <!-- 등록QTY -->
                        ,A.INPUTAMT             <!-- 등록AMT -->
                        ,A.OBJECTIONITEM        <!-- 반려ITEM -->
                        ,A.OBJECTIONQTY         <!-- 반려QTY -->
                        ,A.OBJECTIONAMT         <!-- 반려AMT -->
                        ,A.NORITEM              <!-- 정상ITEM -->
                        ,A.OVERITEM             <!-- 초과ITEM -->
                        ,A.OVERQTY              <!-- 초과Qty -->
                        ,A.OVERAMT              <!-- 초과AMT -->
                        ,A.SHORTITEM            <!-- 부족ITEM -->
                        ,A.SHORTQTY             <!-- 부족Qty -->
                        ,A.SHORTAMT             <!-- 부족AMT -->
                        ,B.DLR_CD               <!-- 딜러코드 -->
                        ,B.STOCK_DD_DOC_NO      <!-- 재고실사문서번호 -->
                        ,B.DOC_STAT_CD          <!-- 문서상태코드 -->
                        ,B.STRGE_CD             <!-- 창고코드 -->
                        ,B.PRSN_ID              <!-- 담당자ID -->
                        ,B.PRSN_NM              <!-- 담당자명 -->
                        ,B.REG_USR_ID
                        ,(SELECT USR_NM FROM CM_0801T WHERE USR_ID = B.REG_USR_ID) AS REG_USR_NM
                        ,B.STOCK_LOCK_YN        <!-- 재고잠금여부 -->
                        ,B.APPROVE_REQ_DT       <!-- 승인요청일자 -->
                        ,B.END_DT               <!-- 완료일자 -->
                        ,B.SIGN_OPN_CONT        <!-- 결재의견내용 -->
                        ,B.REMARK               <!-- 비고 -->
                        ,B.REG_DT               <!-- 등록일자 -->
                        ,A.STOCK_QTY            <!-- 실사총수량-->
                        ,A.STOCK_PRICE          <!-- 실사총금액-->
                        ,TO_CHAR(NVL(B.UPDT_DT,B.REG_DT), 'YYYYMMDDHH24MISS') AS UPDT_DT_STR
                    FROM
                    (
                        SELECT
                            A.STOCK_DD_DOC_NO
                            ,SUM(A.RELITEM) AS AGREEMENTITEM
                            ,SUM(A.RELQTY) AS AGREEMENTQTY
                            ,SUM(A.RELAMT) AS AGREEMENTAMT
                            ,SUM(A.REQITEM) AS APPROVEITEM
                            ,SUM(A.REQQTY) AS APPROVEQTY
                            ,SUM(A.REQAMT) AS APPROVEAMT
                            ,SUM(A.RGSTITEM) AS INPUTITEM
                            ,SUM(A.RGSTQTY) AS INPUTQTY
                            ,SUM(A.RGSTAMT) AS INPUTAMT
                            ,SUM(A.RJCTITEM) AS OBJECTIONITEM
                            ,SUM(A.RJCTQTY) AS OBJECTIONQTY
                            ,SUM(A.RJCTAMT) AS OBJECTIONAMT
                            ,SUM(A.OVERITEM) AS OVERITEM
                            ,SUM(A.OVERQTY) AS OVERQTY
                            ,SUM(A.OVERAMT) AS OVERAMT
                            ,SUM(A.SHORTITEM) AS SHORTITEM
                            ,SUM(A.SHORTQTY) AS SHORTQTY
                            ,SUM(A.SHORTAMT) AS SHORTAMT
                            ,SUM(A.NORITEM) AS NORITEM
                            ,SUM(A.STOCK_QTY) AS STOCK_QTY
                            ,SUM(A.STOCK_PRICE) AS STOCK_PRICE
                        FROM
                        (
                            SELECT
                                A.STOCK_DD_DOC_NO
                                ,CASE A.ITEM_STAT_CD WHEN 'REL'  THEN A.ITEM ELSE 0 END RELITEM
                                ,CASE A.ITEM_STAT_CD WHEN 'REQ'  THEN A.ITEM ELSE 0 END REQITEM
                                ,CASE A.ITEM_STAT_CD WHEN 'RGST' THEN A.ITEM ELSE 0 END RGSTITEM
                                ,CASE A.ITEM_STAT_CD WHEN 'RJCT' THEN A.ITEM ELSE 0 END RJCTITEM
                                ,CASE A.ITEM_STAT_CD WHEN 'REL'  THEN A.DIFF_QTY ELSE 0 END RELQTY
                                ,CASE A.ITEM_STAT_CD WHEN 'REQ'  THEN A.DIFF_QTY ELSE 0 END REQQTY
                                ,CASE A.ITEM_STAT_CD WHEN 'RGST' THEN A.DIFF_QTY ELSE 0 END RGSTQTY
                                ,CASE A.ITEM_STAT_CD WHEN 'RJCT' THEN A.DIFF_QTY ELSE 0 END RJCTQTY
                                ,CASE A.ITEM_STAT_CD WHEN 'REL'  THEN A.AMT ELSE 0 END RELAMT
                                ,CASE A.ITEM_STAT_CD WHEN 'REQ'  THEN A.AMT ELSE 0 END REQAMT
                                ,CASE A.ITEM_STAT_CD WHEN 'RGST' THEN A.AMT ELSE 0 END RGSTAMT
                                ,CASE A.ITEM_STAT_CD WHEN 'RJCT' THEN A.AMT ELSE 0 END RJCTAMT
                                ,A.NORITEM
                                ,A.OVERITEM
                                ,A.SHORTITEM
                                ,CASE WHEN A.DIFF_QTY <![CDATA[<]]> 0 THEN A.DIFF_QTY ELSE 0 END SHORTQTY
                                ,CASE WHEN A.DIFF_QTY <![CDATA[>]]> 0 THEN A.DIFF_QTY ELSE 0 END OVERQTY
                                ,CASE WHEN A.DIFF_QTY <![CDATA[<]]> 0 THEN A.AMT ELSE 0 END SHORTAMT
                                ,CASE WHEN A.DIFF_QTY <![CDATA[>]]> 0 THEN A.AMT ELSE 0 END OVERAMT
                                ,A.STOCK_QTY
                                ,A.STOCK_PRICE
                            FROM
                            (
                                SELECT
                                    A.STOCK_DD_DOC_NO
                                    ,A.ITEM_STAT_CD
                                    ,COUNT(*) AS ITEM
                                    ,SUM(NVL(DD_QTY,0) - NVL(BOOK_QTY,0)) AS DIFF_QTY
                                    ,SUM((NVL(DD_QTY,0) - NVL(BOOK_QTY,0)) * NVL(NVL(C.MOVING_AVG_PRC, B.MOVING_AVG_PRC),0)) AS AMT
                                    ,SUM(CASE WHEN (NVL(DD_QTY,0) - NVL(BOOK_QTY,0)) = 0 THEN 1 ELSE 0 END) NORITEM
                                    ,SUM(CASE WHEN (NVL(DD_QTY,0) - NVL(BOOK_QTY,0)) <![CDATA[>]]> 0 THEN 1 ELSE 0 END) OVERITEM
                                    ,SUM(CASE WHEN (NVL(DD_QTY,0) - NVL(BOOK_QTY,0)) <![CDATA[<]]> 0 THEN 1 ELSE 0 END) SHORTITEM
                                    ,SUM(A.DD_QTY) AS STOCK_QTY<!-- 장부수량을 실사수량 대체 -->
                                    ,SUM(A.DD_QTY * NVL(NVL(C.MOVING_AVG_PRC, B.MOVING_AVG_PRC),0)) AS STOCK_PRICE<!-- 장부수량을 실사수량 대체 -->
                                FROM PT_0602T A
                                INNER JOIN PT_0201T B ON A.DLR_CD = B.DLR_CD AND A.ITEM_CD = B.ITEM_CD
                                LEFT JOIN PT_0208T C ON A.DLR_CD = C.DLR_CD AND A.STRGE_CD = C.STRGE_CD AND A.ITEM_CD = C.ITEM_CD
                                WHERE A.ITEM_STAT_CD != 'DEL'
                                <if test='sDdGr != null and sDdGr != ""'>
                                    AND A.STOCK_ADJ_MVT_DOC_NO IS NULL
                                </if>
                                <if test='sDdGi != null and sDdGi != ""'>
                                    AND A.STOCK_ADJ_MVT_DOC_NO IS NULL
                                </if>
                                <if test='sStockDdDocNo != null and sStockDdDocNo != ""'> AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo} </if>
                                GROUP BY A.DLR_CD ,A.STOCK_DD_DOC_NO ,A.ITEM_STAT_CD
                            ) A
                        ) A
                        GROUP BY A.STOCK_DD_DOC_NO
                    )A
                    INNER JOIN PT_0601T B ON A.STOCK_DD_DOC_NO = B.STOCK_DD_DOC_NO
                    WHERE B.DLR_CD = #{sDlrCd}
                    AND B.DOC_STAT_CD != 'DEL'
                    <if test='sStockDdDocNo != null and sStockDdDocNo != ""'> AND B.STOCK_DD_DOC_NO = #{sStockDdDocNo} </if>
                    <if test='sDocStatCd != null and sDocStatCd != ""'> AND B.DOC_STAT_CD = #{sDocStatCd} </if>
                    <if test='sPrsnId != null and sPrsnId != ""'>
                        AND B.PRSN_ID LIKE '%'||#{sPrsnId}||'%'
                    </if>
                    <if test='sPrsnNm != null and sPrsnNm != ""'>
                        AND B.PRSN_NM LIKE '%'||#{sPrsnNm}||'%'
                    </if>
                    <if test='sDdGr != null and sDdGr != ""'> AND A.OVERITEM <![CDATA[>]]> 0 </if>
                    <if test='sDdGi != null and sDdGi != ""'> AND A.SHORTITEM <![CDATA[>]]> 0 </if>
                    <if test='sStockLockYn != null and sStockLockYn != ""'> AND B.STOCK_LOCK_YN = #{sStockLockYn} </if>
                    <if test='sRegDtFr != null'>
                        AND B.REG_DT <![CDATA[>=]]> #{sRegDtFr}
                    </if>
                    <if test='sRegDtTo != null'>
                        AND B.REG_DT <![CDATA[<=]]> #{sRegDtTo} + 1
                    </if>
                    <if test='sRegCfDtFr != null'>
                        AND B.REG_DT <![CDATA[>=]]> #{sRegCfDtFr}
                    </if>
                    <if test='sRegCfDtTo != null'>
                        AND B.REG_DT <![CDATA[<=]]> #{sRegCfDtTo} + 1
                    </if>
                    <if test='sApproveReqDtFr != null'>
                       AND B.APPROVE_REQ_DT <![CDATA[>=]]> #{sApproveReqDtFr}
                    </if>
                    <if test='sApproveReqDtTo != null'>
                       AND B.APPROVE_REQ_DT <![CDATA[<=]]> #{sApproveReqDtTo} + 1
                    </if>
                    <if test='sEndFrDt != null'>
                       AND B.END_DT <![CDATA[>=]]> #{sEndFrDt}
                    </if>
                    <if test='sEndToDt != null'>
                       AND B.END_DT <![CDATA[<=]]> #{sEndToDt} + 1
                    </if>
                ) T1
                WHERE 1 = 1
                <if test='sRegUsrNm != null and sRegUsrNm != ""'>
                    AND T1.REG_USR_NM LIKE '%'||#{sRegUsrNm}||'%'
                </if>
            ) A
    </select>

    <!-- 재고 실사 문서 정보를 조회한다. -->
    <select id="selectInvestigationListGridByCondition" resultType="InvestigationVO" parameterType="InvestigationSearchVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationListGridByCondition] */
    SELECT
        A.*
    FROM
    (
        SELECT
            ROWNUM AS RNUM
            ,T1.*
        FROM
        (
            SELECT
                A.AGREEMENTITEM         <!-- 승인ITEM -->
                ,A.AGREEMENTQTY         <!-- 승인QTY -->
                ,A.AGREEMENTAMT         <!-- 승인AMT -->
                ,A.APPROVEITEM          <!-- 승인요청ITEM -->
                ,A.APPROVEQTY           <!-- 승인요청QTY -->
                ,A.APPROVEAMT           <!-- 승인요청AMT -->
                ,A.INPUTITEM            <!-- 등록ITEM -->
                ,A.INPUTQTY             <!-- 등록QTY -->
                ,A.INPUTAMT             <!-- 등록AMT -->
                ,A.OBJECTIONITEM        <!-- 반려ITEM -->
                ,A.OBJECTIONQTY         <!-- 반려QTY -->
                ,A.OBJECTIONAMT         <!-- 반려AMT -->
                ,A.NORITEM              <!-- 정상ITEM -->
                ,A.OVERITEM             <!-- 초과ITEM -->
                ,A.OVERQTY              <!-- 초과Qty -->
                ,A.OVERAMT              <!-- 초과AMT -->
                ,A.SHORTITEM            <!-- 부족ITEM -->
                ,A.SHORTQTY             <!-- 부족Qty -->
                ,A.SHORTAMT             <!-- 부족AMT -->
                ,B.DLR_CD               <!-- 딜러코드 -->
                ,B.STOCK_DD_DOC_NO      <!-- 재고실사문서번호 -->
                ,B.DOC_STAT_CD          <!-- 문서상태코드 -->
                ,B.STRGE_CD             <!-- 창고코드 -->
                ,B.PRSN_ID              <!-- 담당자ID -->
                ,B.PRSN_NM              <!-- 담당자명 -->
                ,B.REG_USR_ID
                ,(SELECT USR_NM FROM CM_0801T WHERE USR_ID = B.REG_USR_ID) AS REG_USR_NM
                ,B.STOCK_LOCK_YN        <!-- 재고잠금여부 -->
                ,B.APPROVE_REQ_DT       <!-- 승인요청일자 -->
                ,B.END_DT               <!-- 완료일자 -->
                ,B.SIGN_OPN_CONT        <!-- 결재의견내용 -->
                ,B.REMARK               <!-- 비고 -->
                ,B.REG_DT               <!-- 등록일자 -->
                ,A.STOCK_QTY            <!-- 실사총수량-->
                ,A.STOCK_PRICE          <!-- 실사총금액-->
                ,TO_CHAR(NVL(B.UPDT_DT,B.REG_DT), 'YYYYMMDDHH24MISS') AS UPDT_DT_STR
            FROM
            (
                SELECT
                    A.STOCK_DD_DOC_NO
                    ,SUM(A.RELITEM) AS AGREEMENTITEM
                    ,SUM(A.RELQTY) AS AGREEMENTQTY
                    ,SUM(A.RELAMT) AS AGREEMENTAMT
                    ,SUM(A.REQITEM) AS APPROVEITEM
                    ,SUM(A.REQQTY) AS APPROVEQTY
                    ,SUM(A.REQAMT) AS APPROVEAMT
                    ,SUM(A.RGSTITEM) AS INPUTITEM
                    ,SUM(A.RGSTQTY) AS INPUTQTY
                    ,SUM(A.RGSTAMT) AS INPUTAMT
                    ,SUM(A.RJCTITEM) AS OBJECTIONITEM
                    ,SUM(A.RJCTQTY) AS OBJECTIONQTY
                    ,SUM(A.RJCTAMT) AS OBJECTIONAMT
                    ,SUM(A.OVERITEM) AS OVERITEM
                    ,SUM(A.OVERQTY) AS OVERQTY
                    ,SUM(A.OVERAMT) AS OVERAMT
                    ,SUM(A.SHORTITEM) AS SHORTITEM
                    ,SUM(A.SHORTQTY) AS SHORTQTY
                    ,SUM(A.SHORTAMT) AS SHORTAMT
                    ,SUM(A.NORITEM) AS NORITEM
                    ,SUM(A.STOCK_QTY) AS STOCK_QTY
                    ,SUM(A.STOCK_PRICE) AS STOCK_PRICE
                FROM
                (
                    SELECT
                        A.STOCK_DD_DOC_NO
                        ,CASE A.ITEM_STAT_CD WHEN 'REL'  THEN A.ITEM ELSE 0 END RELITEM
                        ,CASE A.ITEM_STAT_CD WHEN 'REQ'  THEN A.ITEM ELSE 0 END REQITEM
                        ,CASE A.ITEM_STAT_CD WHEN 'RGST' THEN A.ITEM ELSE 0 END RGSTITEM
                        ,CASE A.ITEM_STAT_CD WHEN 'RJCT' THEN A.ITEM ELSE 0 END RJCTITEM
                        ,CASE A.ITEM_STAT_CD WHEN 'REL'  THEN A.DIFF_QTY ELSE 0 END RELQTY
                        ,CASE A.ITEM_STAT_CD WHEN 'REQ'  THEN A.DIFF_QTY ELSE 0 END REQQTY
                        ,CASE A.ITEM_STAT_CD WHEN 'RGST' THEN A.DIFF_QTY ELSE 0 END RGSTQTY
                        ,CASE A.ITEM_STAT_CD WHEN 'RJCT' THEN A.DIFF_QTY ELSE 0 END RJCTQTY
                        ,CASE A.ITEM_STAT_CD WHEN 'REL'  THEN A.AMT ELSE 0 END RELAMT
                        ,CASE A.ITEM_STAT_CD WHEN 'REQ'  THEN A.AMT ELSE 0 END REQAMT
                        ,CASE A.ITEM_STAT_CD WHEN 'RGST' THEN A.AMT ELSE 0 END RGSTAMT
                        ,CASE A.ITEM_STAT_CD WHEN 'RJCT' THEN A.AMT ELSE 0 END RJCTAMT
                        ,A.NORITEM
                        ,A.OVERITEM
                        ,A.SHORTITEM
                        ,CASE WHEN A.DIFF_QTY <![CDATA[<]]> 0 THEN A.DIFF_QTY ELSE 0 END SHORTQTY
                        ,CASE WHEN A.DIFF_QTY <![CDATA[>]]> 0 THEN A.DIFF_QTY ELSE 0 END OVERQTY
                        ,CASE WHEN A.DIFF_QTY <![CDATA[<]]> 0 THEN A.AMT ELSE 0 END SHORTAMT
                        ,CASE WHEN A.DIFF_QTY <![CDATA[>]]> 0 THEN A.AMT ELSE 0 END OVERAMT
                        ,A.STOCK_QTY
                        ,A.STOCK_PRICE
                    FROM
                    (
                        SELECT
                            A.STOCK_DD_DOC_NO
                            ,A.ITEM_STAT_CD
                            ,COUNT(*) AS ITEM
                            ,SUM(NVL(DD_QTY,0) - NVL(BOOK_QTY,0)) AS DIFF_QTY
                            ,SUM((NVL(DD_QTY,0) - NVL(BOOK_QTY,0)) * NVL(NVL(C.MOVING_AVG_PRC, B.MOVING_AVG_PRC),0)) AS AMT
                            ,SUM(CASE WHEN (NVL(DD_QTY,0) - NVL(BOOK_QTY,0)) = 0 THEN 1 ELSE 0 END) NORITEM
                            ,SUM(CASE WHEN (NVL(DD_QTY,0) - NVL(BOOK_QTY,0)) <![CDATA[>]]> 0 THEN 1 ELSE 0 END) OVERITEM
                            ,SUM(CASE WHEN (NVL(DD_QTY,0) - NVL(BOOK_QTY,0)) <![CDATA[<]]> 0 THEN 1 ELSE 0 END) SHORTITEM
                            ,SUM(A.DD_QTY) AS STOCK_QTY<!-- 장부수량을 실사수량 대체 -->
                            ,SUM(A.DD_QTY * NVL(NVL(C.MOVING_AVG_PRC, B.MOVING_AVG_PRC),0)) AS STOCK_PRICE<!-- 장부수량을 실사수량 대체 -->
                        FROM PT_0602T A
                        INNER JOIN PT_0201T B ON A.DLR_CD = B.DLR_CD AND A.ITEM_CD = B.ITEM_CD
                        LEFT JOIN PT_0208T C ON A.DLR_CD = C.DLR_CD AND A.STRGE_CD = C.STRGE_CD AND A.ITEM_CD = C.ITEM_CD
                        WHERE A.ITEM_STAT_CD != 'DEL'
                        <if test='sDdGr != null and sDdGr != ""'>
                            AND A.STOCK_ADJ_MVT_DOC_NO IS NULL
                        </if>
                        <if test='sDdGi != null and sDdGi != ""'>
                            AND A.STOCK_ADJ_MVT_DOC_NO IS NULL
                        </if>
                        <if test='sStockDdDocNo != null and sStockDdDocNo != ""'> AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo} </if>
                        GROUP BY A.DLR_CD ,A.STOCK_DD_DOC_NO ,A.ITEM_STAT_CD
                    ) A
                ) A
                GROUP BY A.STOCK_DD_DOC_NO
            )A
            INNER JOIN PT_0601T B ON A.STOCK_DD_DOC_NO = B.STOCK_DD_DOC_NO
            WHERE B.DLR_CD = #{sDlrCd}
            AND B.DOC_STAT_CD != 'DEL'
            <if test='sStockDdDocNo != null and sStockDdDocNo != ""'> AND B.STOCK_DD_DOC_NO = #{sStockDdDocNo} </if>
            <if test='sDocStatCd != null and sDocStatCd != ""'> AND B.DOC_STAT_CD = #{sDocStatCd} </if>
            <if test='sPrsnId != null and sPrsnId != ""'>
                AND B.PRSN_ID LIKE '%'||#{sPrsnId}||'%'
            </if>
            <if test='sPrsnNm != null and sPrsnNm != ""'>
                AND B.PRSN_NM LIKE '%'||#{sPrsnNm}||'%'
            </if>
            <if test='sDdGr != null and sDdGr != ""'> AND A.OVERITEM <![CDATA[>]]> 0 </if>
            <if test='sDdGi != null and sDdGi != ""'> AND A.SHORTITEM <![CDATA[>]]> 0 </if>
            <if test='sStockLockYn != null and sStockLockYn != ""'> AND B.STOCK_LOCK_YN = #{sStockLockYn} </if>
            <if test='sRegDtFr != null'>
                AND B.REG_DT <![CDATA[>=]]> #{sRegDtFr}
            </if>
            <if test='sRegDtTo != null'>
                AND B.REG_DT <![CDATA[<=]]> #{sRegDtTo} + 1
            </if>
            <if test='sRegCfDtFr != null'>
                AND B.REG_DT <![CDATA[>=]]> #{sRegCfDtFr}
            </if>
            <if test='sRegCfDtTo != null'>
                AND B.REG_DT <![CDATA[<=]]> #{sRegCfDtTo} + 1
            </if>
            <if test='sApproveReqDtFr != null'>
               AND B.APPROVE_REQ_DT <![CDATA[>=]]> #{sApproveReqDtFr}
            </if>
            <if test='sApproveReqDtTo != null'>
               AND B.APPROVE_REQ_DT <![CDATA[<=]]> #{sApproveReqDtTo} + 1
            </if>
            <if test='sEndFrDt != null'>
               AND B.END_DT <![CDATA[>=]]> #{sEndFrDt}
            </if>
            <if test='sEndToDt != null'>
               AND B.END_DT <![CDATA[<=]]> #{sEndToDt} + 1
            </if>
            ORDER BY
            <choose>
            <when test='sort != null'>
            <foreach item="item" index="index" collection="sort" open="" separator="," close="">
                <choose>
                    <when test='item.field == "stockDdDocNo"'> B.STOCK_DD_DOC_NO <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "regDt"'> B.REG_DT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "docStatCd"'> B.DOC_STAT_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "prsnId"'> B.PRSN_ID <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "prsnNm"'> B.PRSN_NM <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "approveReqDt"'> B.APPROVE_REQ_DT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "remark"'> B.REMARK <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "agreementItem"'> A.AGREEMENTITEM <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "agreementQty"'> A.AGREEMENTQTY <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "agreementAmt"'> A.AGREEMENTAMT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "approveItem"'> A.APPROVEITEM <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "approveQty"'> A.APPROVEQTY <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "approveAmt"'> A.APPROVEAMT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "inputItem"'> A.INPUTITEM <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "inputQty"'> A.INPUTQTY <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "inputAmt"'> A.INPUTAMT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "objectionItem"'> A.OBJECTIONITEM <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "objectionQty"'> A.OBJECTIONQTY <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "objectionAmt"'> A.OBJECTIONAMT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "norItem"'> A.NORITEM <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "overItem"'> A.OVERITEM <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "overQty"'> A.OVERQTY <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "overAmt"'> A.OVERAMT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "shortItem"'> A.SHORTITEM <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "shortQty"'> A.SHORTQTY <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "shortAmt"'> A.SHORTAMT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "stockLockYn"'> B.STOCK_LOCK_YN <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "stockQty"'> A.STOCK_QTY <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "stockPrice"'> A.STOCK_PRICE <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "regUsrNm"'> REG_USR_NM <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "endDt"'> B.END_DT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                </choose>
            </foreach>
            </when>
            <otherwise>
                B.DLR_CD ASC ,B.STOCK_DD_DOC_NO DESC
            </otherwise>
            </choose>
        ) T1
        WHERE 1 = 1
        <if test='sRegUsrNm != null and sRegUsrNm != ""'>
            AND T1.REG_USR_NM LIKE '%'||#{sRegUsrNm}||'%'
        </if>
    ) A
    <where>
    <if test='firstIndex != -1 and lastIndex != -1'>
        RNUM <![CDATA[<=]]> #{lastIndex} AND RNUM <![CDATA[>]]> #{firstIndex}
    </if>
    </where>
    </select>

    <!-- 재고 실사 문서 정보를 조회한다. -->
    <select id="selectInvestigationListDetailGridByConditionCnt" resultType="int" parameterType="InvestigationSearchVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationListDetailGridByConditionCnt] */
    SELECT
        COUNT(*) AS VALUE
    FROM
    (
        SELECT
            STOCK_DD_DOC_LINE_NO AS RNUM
            ,A.DLR_CD
            ,A.LOC_CD
            ,G.LOC_CD_MIG
            ,A.ITEM_CD
            ,A.BOOK_QTY
            ,A.DD_QTY
            ,A.DD_QTY - A.BOOK_QTY AS DIFF_QTY <!-- 차이수량(손익수량) -->
            ,A.UNIT_CD
            ,A.REASON_CONT
            ,A.ITEM_STAT_CD
            ,A.STRGE_CD
            ,C.ITEM_NM
            ,C.ITEM_DSTIN_CD
            ,C.CARLINE_CD
            ,C.ABC_IND
            ,C.LAST_GR_DT
            ,C.LAST_GI_DT
            ,NVL(C.STOCK_UNIT_CD,'EA') AS UNIT_CD
            ,NVL(F.AVLB_STOCK_QTY,0) + NVL(F.RESV_STOCK_QTY,0) - NVL(F.BORROW_QTY,0) + NVL(F.RENT_QTY,0) AS STOCK_QTY
            ,NVL(D.MOVING_AVG_PRC, C.MOVING_AVG_PRC) AS MOVING_AVG_PRC
            ,A.STOCK_DD_DOC_NO
            ,A.STOCK_DD_DOC_LINE_NO
            ,E.BP_TP
            ,NVL(F.RESV_STOCK_QTY,0) AS RESV_STOCK_QTY
            ,NVL(F.BORROW_QTY,0) AS BORROW_QTY
            ,NVL(F.RENT_QTY,0) AS RENT_QTY
            FROM PT_0602T A
            INNER JOIN PT_0601T B ON A.DLR_CD = B.DLR_CD AND A.STOCK_DD_DOC_NO = B.STOCK_DD_DOC_NO
            INNER JOIN PT_0201T C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
            LEFT JOIN PT_0208T D ON A.DLR_CD  = D.DLR_CD AND A.STRGE_CD = D.STRGE_CD AND A.ITEM_CD = D.ITEM_CD
            LEFT JOIN PT_0211T E ON A.DLR_CD  = E.DLR_CD AND C.BP_CD   = E.BP_CD
            INNER JOIN PT_0301T F ON A.DLR_CD = F.DLR_CD AND A.STRGE_CD = F.STRGE_CD AND A.ITEM_CD = F.ITEM_CD
            LEFT JOIN PT_0224T G ON A.DLR_CD = G.DLR_CD AND A.STRGE_CD = G.STRGE_CD AND A.ITEM_CD = G.ITEM_CD
            WHERE A.DLR_CD = #{sDlrCd}
            AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo}
            AND A.ITEM_STAT_CD != 'DEL'
            ORDER BY
            <choose>
            <when test='sort != null'>
            <foreach item="item" index="index" collection="sort" open="" separator="," close="">
                <choose>
                    <when test='item.field == "locCd"'> A.LOC_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "itemCd"'> A.ITEM_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "bookQty"'> A.BOOK_QTY <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "ddQty"'> A.DD_QTY <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "unitCd"'> A.UNIT_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "reasonCont"'> A.REASON_CONT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "itemStatCd"'> A.ITEM_STAT_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "strgeCd"'> B.STRGE_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "itemNm"'> C.ITEM_NM <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "itemDstinCd"'> C.ITEM_DSTIN_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "carlineCd"'> C.CARLINE_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "abcInd"'> C.ABC_IND <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "lastGrDt"'> C.LAST_GR_DT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "lastGiDt"'> C.LAST_GI_DT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "locCdMig"'> G.LOC_CD_MIG <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <otherwise>
                    B.DLR_CD ASC ,B.STOCK_DD_DOC_NO ASC
                    </otherwise>
                </choose>
            </foreach>
            </when>
            <otherwise>
            B.DLR_CD ASC ,B.STOCK_DD_DOC_NO ASC
            </otherwise>
            </choose>
        ) A
    </select>

    <!-- 재고 실사 문서 정보를 조회한다. -->
    <select id="selectInvestigationListDetailGridByCondition" resultType="InvestigationItemVO" parameterType="InvestigationSearchVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationListDetailGridByCondition] */
    SELECT * FROM (
        SELECT
            ROWNUM AS RNUM
           ,A.*
        FROM
        (
            SELECT
                 A.STOCK_DD_DOC_LINE_NO
                ,A.DLR_CD
                ,A.LOC_CD
                ,G.LOC_CD_MIG
                ,A.ITEM_CD
                ,A.BOOK_QTY
                ,A.DD_QTY
                ,A.DD_QTY - A.BOOK_QTY AS DIFF_QTY <!-- 차이수량(손익수량) -->
                ,A.UNIT_CD
                ,A.REASON_CONT
                ,A.ITEM_STAT_CD
                ,A.STRGE_CD
                ,C.ITEM_NM
                ,C.ITEM_DSTIN_CD
                ,C.CARLINE_CD
                ,C.ABC_IND
                ,C.LAST_GR_DT
                ,C.LAST_GI_DT
                ,NVL(C.STOCK_UNIT_CD,'EA') AS UNIT_CD
                ,NVL(F.AVLB_STOCK_QTY,0) + NVL(F.RESV_STOCK_QTY,0) - NVL(F.BORROW_QTY,0) + NVL(F.RENT_QTY,0) AS STOCK_QTY
                ,NVL(D.MOVING_AVG_PRC, C.MOVING_AVG_PRC) AS MOVING_AVG_PRC
                ,A.STOCK_DD_DOC_NO
                ,A.STOCK_DD_DOC_LINE_NO
                ,E.BP_TP
                ,NVL(F.RESV_STOCK_QTY,0) AS RESV_STOCK_QTY
                ,NVL(F.BORROW_QTY,0) AS BORROW_QTY
                ,NVL(F.RENT_QTY,0) AS RENT_QTY
                FROM PT_0602T A
                INNER JOIN PT_0601T B ON A.DLR_CD = B.DLR_CD AND A.STOCK_DD_DOC_NO = B.STOCK_DD_DOC_NO
                INNER JOIN PT_0201T C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
                LEFT JOIN PT_0208T D ON A.DLR_CD  = D.DLR_CD AND A.STRGE_CD = D.STRGE_CD AND A.ITEM_CD = D.ITEM_CD
                LEFT JOIN PT_0211T E ON A.DLR_CD  = E.DLR_CD AND C.BP_CD   = E.BP_CD
                INNER JOIN PT_0301T F ON A.DLR_CD = F.DLR_CD AND A.STRGE_CD = F.STRGE_CD AND A.ITEM_CD = F.ITEM_CD
                LEFT JOIN PT_0224T G ON A.DLR_CD = G.DLR_CD AND A.STRGE_CD = G.STRGE_CD AND A.ITEM_CD = G.ITEM_CD
                WHERE A.DLR_CD = #{sDlrCd}
                AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo}
                AND A.ITEM_STAT_CD != 'DEL'
                ORDER BY
                <choose>
                <when test='sort != null'>
                <foreach item="item" index="index" collection="sort" open="" separator="," close="">
                    <choose>
                        <when test='item.field == "locCd"'> A.LOC_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                        <when test='item.field == "itemCd"'> A.ITEM_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                        <when test='item.field == "bookQty"'> A.BOOK_QTY <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                        <when test='item.field == "ddQty"'> A.DD_QTY <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                        <when test='item.field == "unitCd"'> A.UNIT_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                        <when test='item.field == "reasonCont"'> A.REASON_CONT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                        <when test='item.field == "itemStatCd"'> A.ITEM_STAT_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                        <when test='item.field == "strgeCd"'> B.STRGE_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                        <when test='item.field == "itemNm"'> C.ITEM_NM <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                        <when test='item.field == "itemDstinCd"'> C.ITEM_DSTIN_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                        <when test='item.field == "carlineCd"'> C.CARLINE_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                        <when test='item.field == "abcInd"'> C.ABC_IND <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                        <when test='item.field == "lastGrDt"'> C.LAST_GR_DT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                        <when test='item.field == "lastGiDt"'> C.LAST_GI_DT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                        <when test='item.field == "locCdMig"'> G.LOC_CD_MIG <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                        <otherwise>
                        B.DLR_CD ASC ,B.STOCK_DD_DOC_NO ASC
                        </otherwise>
                    </choose>
                </foreach>
                </when>
                <otherwise>
                B.DLR_CD ASC ,B.STOCK_DD_DOC_NO ASC
                </otherwise>
                </choose>
            ) A
        )
        <where>
        <if test='firstIndex != -1 and lastIndex != -1'>
            RNUM <![CDATA[<=]]> #{lastIndex} AND RNUM <![CDATA[>]]> #{firstIndex}
        </if>
        </where>
    </select>

    <!-- 재고 실사 문서(입출고) 필요 COUNT정보를 조회한다. -->
    <select id="selectInvestigationForEndCnt" resultType="int" parameterType="InvestigationSearchVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationForEndCnt] */
    SELECT  COUNT(*)
    FROM
    (
        SELECT
            A.DLR_CD
            ,A.STOCK_DD_DOC_NO
            ,A.STOCK_DD_DOC_LINE_NO
            ,B.STRGE_CD
            ,A.LOC_CD
            ,A.ITEM_CD
            ,A.ITEM_STAT_CD
            ,C.ITEM_NM
            ,C.ITEM_DSTIN_CD
            ,C.CARLINE_CD
            ,C.ABC_IND
            ,C.LAST_GR_DT
            ,C.LAST_GI_DT
            ,CASE WHEN NVL(A.BOOK_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0)
            ELSE NVL(A.BOOK_QTY, 0)
            END BOOK_QTY
            ,CASE WHEN NVL(A.DD_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0)
            ELSE A.DD_QTY
            END DD_QTY
            ,CASE WHEN NVL(A.BOOK_QTY, -999) = -999 THEN  NVL(D.AVLB_STOCK_QTY, 0) ELSE NVL(A.BOOK_QTY, 0)
            END
            - CASE WHEN NVL(A.DD_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0) ELSE  A.DD_QTY
            END -- 장부수량(-)실사수량
            AS DIFF_QTY   -- 차이수량
            ,NVL(NVL(E.MOVING_AVG_PRC, C.MOVING_AVG_PRC),0) AS MOVING_AVG_PRC
            ,A.UNIT_CD
            ,NVL(A.REASON_CONT, ' ') AS REASON_CONT
        FROM PT_0602T A
        INNER JOIN PT_0601T B ON B.DLR_CD = A.DLR_CD AND B.STOCK_DD_DOC_NO = A.STOCK_DD_DOC_NO
        INNER JOIN PT_0201T C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
        INNER JOIN PT_0301T D ON A.DLR_CD = D.DLR_CD AND A.STRGE_CD = D.STRGE_CD AND A.ITEM_CD = D.ITEM_CD
        LEFT OUTER JOIN PT_0208T E ON A.DLR_CD = E.DLR_CD AND A.STRGE_CD = E.STRGE_CD AND A.ITEM_CD = E.ITEM_CD
        WHERE A.DLR_CD = #{sDlrCd}
        AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo}
        <if test='sRejectYn != null and sRejectYn != ""'>
        <if test='sRejectYn == "Y"'>
            AND A.ITEM_STAT_CD = 'RJCT'
        </if >
        <if test='sRejectYn == "N"'>
            AND A.ITEM_STAT_CD != 'RJCT'
        </if>
        </if>
        AND A.ITEM_STAT_CD != 'DEL'
        AND A.STOCK_ADJ_MVT_DOC_NO IS NULL
    ) A
    WHERE A.DIFF_QTY != 0
    </select>

    <!-- 재고 실사 문서(Overage 입고) 정보를 조회한다. -->
    <select id="selectInvestigationForReserveByKey" resultType="ReceiveEtcItemVO" parameterType="InvestigationSearchVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationForReserveByKey] */
    SELECT
        A.DLR_CD
        ,A.STOCK_DD_DOC_NO AS REF_DOC_NO                         <!-- 참조문서(재고실사문서) -->
        ,A.STOCK_DD_DOC_LINE_NO AS REF_DOC_LINE_NO               <!-- 참조문서라인번호(재고실사라인번호) -->
        ,A.STRGE_CD
        ,A.LOC_CD
        ,A.ITEM_CD
        ,A.ITEM_STAT_CD
        ,A.ITEM_NM
        ,A.ITEM_DSTIN_CD
        ,A.CARLINE_CD
        ,A.ABC_IND
        ,A.LAST_GR_DT
        ,A.LAST_GI_DT
        ,A.BOOK_QTY                                              <!-- 장부수량 -->
        ,A.DD_QTY                                                <!-- 실사수량 -->
        ,(A.DIFF_QTY * -1) AS QTY                                <!-- 손실수량 -->
        ,A.MOVING_AVG_PRC
        ,A.MOVING_AVG_PRC AS PRC
        ,(A.DIFF_QTY * -1) * A.MOVING_AVG_PRC AS AMT             <!-- 손실금액 -->
        ,A.MOVING_AVG_PRC AS TAX_DDCT_PRC
        ,0 AS TAX_AMT
        ,(A.DIFF_QTY * -1) * A.MOVING_AVG_PRC AS TAX_DDCT_AMT
        ,A.UNIT_CD
        ,A.REASON_CONT AS GR_REASON_CD                           <!-- 출고사유 -->
        ,A.STOCK_QTY
        ,A.AVLB_STOCK_QTY
        ,A.BORROW_QTY
        ,A.RENT_QTY
        ,A.RESV_STOCK_QTY
    FROM
    (
        SELECT
            A.DLR_CD
            ,A.STOCK_DD_DOC_NO
            ,A.STOCK_DD_DOC_LINE_NO
            ,A.STRGE_CD
            ,A.LOC_CD
            ,A.ITEM_CD
            ,A.ITEM_STAT_CD
            ,C.ITEM_NM
            ,C.ITEM_DSTIN_CD
            ,C.CARLINE_CD
            ,C.ABC_IND
            ,C.LAST_GR_DT
            ,C.LAST_GI_DT
            ,CASE WHEN NVL(A.BOOK_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0)
            ELSE NVL(A.BOOK_QTY, 0)
            END BOOK_QTY<!-- 장부수량 -->
            ,CASE WHEN NVL(A.DD_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0)
            ELSE A.DD_QTY
            END DD_QTY<!-- 실사수량 -->
            ,CASE WHEN NVL(A.BOOK_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0)
            ELSE NVL(A.BOOK_QTY, 0)
            END - CASE WHEN NVL(A.DD_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0)
            ELSE A.DD_QTY
            END AS DIFF_QTY<!-- 차이수량 -->
            ,NVL(NVL(E.MOVING_AVG_PRC, C.MOVING_AVG_PRC),0) AS MOVING_AVG_PRC
            ,NVL(NVL(E.MOVING_AVG_PRC, C.MOVING_AVG_PRC),0) AS PURC_PRC
            ,A.UNIT_CD
            ,NVL(A.REASON_CONT, ' ') AS REASON_CONT
            ,NVL(D.AVLB_STOCK_QTY,0) + NVL(D.RESV_STOCK_QTY,0) - NVL(D.BORROW_QTY,0) + NVL(D.RENT_QTY,0) AS STOCK_QTY
            ,NVL(D.AVLB_STOCK_QTY,0) AS AVLB_STOCK_QTY
            ,NVL(D.BORROW_QTY,0) AS BORROW_QTY
            ,NVL(D.RENT_QTY,0) AS RENT_QTY
            ,NVL(D.RESV_STOCK_QTY,0) AS RESV_STOCK_QTY
        FROM DMSDB.PT_0602T A
        INNER JOIN PT_0601T B ON B.DLR_CD = A.DLR_CD AND B.STOCK_DD_DOC_NO = A.STOCK_DD_DOC_NO
        INNER JOIN PT_0201T C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
        INNER JOIN PT_0301T D ON A.DLR_CD = D.DLR_CD AND A.STRGE_CD = D.STRGE_CD AND A.ITEM_CD  = D.ITEM_CD
        LEFT JOIN PT_0208T E ON A.DLR_CD  = E.DLR_CD AND A.STRGE_CD = E.STRGE_CD AND A.ITEM_CD = E.ITEM_CD
        WHERE A.DLR_CD = #{sDlrCd}
        AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo}
        <if test='sRejectYn != null and sRejectYn != ""'>
            <if test='sRejectYn == "Y"'>
                AND A.ITEM_STAT_CD = 'RJCT'
            </if >
            <if test='sRejectYn == "N"'>
                AND A.ITEM_STAT_CD != 'RJCT'
            </if>
        </if>
        AND A.ITEM_STAT_CD != 'DEL'
        AND A.STOCK_ADJ_MVT_DOC_NO IS NULL
    ) A
    WHERE A.DIFF_QTY <![CDATA[<]]> 0
    ORDER BY A.DLR_CD ASC ,A.STOCK_DD_DOC_NO ASC ,A.STOCK_DD_DOC_LINE_NO ASC
    </select>

    <!-- 재고 실사 문서(Overage 입고) 정보 Count를 조회한다. -->
    <select id="selectInvestigationForReserveByKeyCnt" resultType="int" parameterType="InvestigationSearchVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationForReserveByKeyCnt] */
    SELECT
        COUNT(*)
    FROM
    (
        SELECT
            A.DLR_CD
            ,A.STOCK_DD_DOC_NO
            ,A.STOCK_DD_DOC_LINE_NO
            ,B.STRGE_CD
            ,A.LOC_CD
            ,A.ITEM_CD
            ,A.ITEM_STAT_CD
            ,C.ITEM_NM
            ,C.ITEM_DSTIN_CD
            ,C.CARLINE_CD
            ,C.ABC_IND
            ,C.LAST_GR_DT
            ,C.LAST_GI_DT
            ,CASE WHEN NVL(A.BOOK_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0)
            ELSE NVL(A.BOOK_QTY, 0)
            END BOOK_QTY<!-- 장부수량 -->
            ,CASE WHEN NVL(A.DD_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0)
            ELSE A.DD_QTY
            END DD_QTY<!-- 실사수량 -->
            ,CASE WHEN NVL(A.BOOK_QTY, -999) = -999 THEN  NVL(D.AVLB_STOCK_QTY, 0) ELSE NVL(A.BOOK_QTY, 0)
            END
            - CASE WHEN NVL(A.DD_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0) ELSE A.DD_QTY
            END
            AS DIFF_QTY
            ,NVL(C.MOVING_AVG_PRC, 0) AS MOVING_AVG_PRC
            ,A.UNIT_CD
            ,NVL(A.REASON_CONT, ' ') AS REASON_CONT
        FROM DMSDB.PT_0602T A
        INNER JOIN PT_0601T B ON B.DLR_CD = A.DLR_CD AND B.STOCK_DD_DOC_NO = A.STOCK_DD_DOC_NO
        INNER JOIN PT_0201T C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
        INNER JOIN PT_0301T D ON A.DLR_CD   = D.DLR_CD AND A.STRGE_CD = D.STRGE_CD AND A.ITEM_CD  = D.ITEM_CD
        WHERE A.DLR_CD = #{sDlrCd}
        AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo}
        <if test='sRejectYn != null and sRejectYn != ""'>
        <if test='sRejectYn == "Y"'>
            AND A.ITEM_STAT_CD = 'RJCT'
        </if >
        <if test='sRejectYn == "N"'>
            AND A.ITEM_STAT_CD != 'RJCT'
        </if>
        </if>
        AND A.ITEM_STAT_CD     != 'DEL'
        AND A.STOCK_ADJ_MVT_DOC_NO IS NULL
    ) A
    WHERE A.DIFF_QTY <![CDATA[<]]> 0
    </select>

    <!-- 재고 실사 문서(Shortage 출고) 정보를 조회한다. -->
    <select id="selectInvestigationForIssueByKey" resultType="IssueEtcItemVO" parameterType="InvestigationSearchVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationForIssueByKey] */
    SELECT
        A.DLR_CD
        ,A.STOCK_DD_DOC_NO AS REF_DOC_NO
        ,A.STOCK_DD_DOC_LINE_NO AS REF_DOC_LINE_NO
        ,A.STRGE_CD
        ,A.LOC_CD
        ,A.ITEM_CD
        ,A.ITEM_STAT_CD
        ,A.ITEM_NM
        ,A.ITEM_DSTIN_CD
        ,A.CARLINE_CD
        ,A.ABC_IND
        ,A.LAST_GR_DT
        ,A.LAST_GI_DT
        ,A.BOOK_QTY
        ,A.DD_QTY
        ,A.DIFF_QTY AS QTY
        ,A.MOVING_AVG_PRC
        ,A.MOVING_AVG_PRC AS PRC
        ,A.DIFF_QTY * A.MOVING_AVG_PRC AS AMT
        ,A.MOVING_AVG_PRC AS TAX_DDCT_PRC
        ,0 AS TAX_AMT
        ,A.DIFF_QTY * A.MOVING_AVG_PRC AS TAX_DDCT_AMT
        ,A.UNIT_CD
        ,A.REASON_CONT AS GI_REASON_CD
        ,A.STOCK_QTY
        ,A.AVLB_STOCK_QTY
        ,A.BORROW_QTY
        ,A.RENT_QTY
        ,A.RESV_STOCK_QTY
    FROM
    (
        SELECT
            A.DLR_CD
            ,A.STOCK_DD_DOC_NO
            ,A.STOCK_DD_DOC_LINE_NO
            ,A.STRGE_CD
            ,A.LOC_CD
            ,A.ITEM_CD
            ,A.ITEM_STAT_CD
            ,C.ITEM_NM
            ,C.ITEM_DSTIN_CD
            ,C.CARLINE_CD
            ,C.ABC_IND
            ,C.LAST_GR_DT
            ,C.LAST_GI_DT
            ,CASE WHEN NVL(A.BOOK_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0)
            ELSE NVL(A.BOOK_QTY, 0)
            END BOOK_QTY
            ,CASE WHEN NVL(A.DD_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0)
            ELSE A.DD_QTY
            END DD_QTY
            ,CASE WHEN NVL(A.BOOK_QTY, -999) = -999 THEN  NVL(D.AVLB_STOCK_QTY, 0) ELSE NVL(A.BOOK_QTY, 0)
            END
            - CASE WHEN NVL(A.DD_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0) ELSE  A.DD_QTY
            END<!-- 장부수량(-)실사수량 -->
            AS DIFF_QTY <!-- 차이수량 -->
            ,NVL(NVL(E.MOVING_AVG_PRC, C.MOVING_AVG_PRC),0) AS MOVING_AVG_PRC
            ,A.UNIT_CD
            ,NVL(A.REASON_CONT, ' ') AS REASON_CONT
            ,NVL(D.AVLB_STOCK_QTY,0) + NVL(D.RESV_STOCK_QTY,0) - NVL(D.BORROW_QTY,0) + NVL(D.RENT_QTY,0) AS STOCK_QTY
            ,NVL(D.AVLB_STOCK_QTY,0) AS AVLB_STOCK_QTY
            ,NVL(D.BORROW_QTY,0) AS BORROW_QTY
            ,NVL(D.RENT_QTY,0) AS RENT_QTY
            ,NVL(D.RESV_STOCK_QTY,0) AS RESV_STOCK_QTY
        FROM PT_0602T A
        INNER JOIN PT_0601T B ON B.DLR_CD = A.DLR_CD AND B.STOCK_DD_DOC_NO = A.STOCK_DD_DOC_NO
        INNER JOIN PT_0201T C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
        INNER JOIN PT_0301T D ON A.DLR_CD = D.DLR_CD AND A.STRGE_CD = D.STRGE_CD AND A.ITEM_CD = D.ITEM_CD
        LEFT OUTER JOIN PT_0208T E ON A.DLR_CD = E.DLR_CD AND A.STRGE_CD = E.STRGE_CD AND A.ITEM_CD = E.ITEM_CD
        WHERE A.DLR_CD = #{sDlrCd}
        AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo}
        <if test='sRejectYn != null and sRejectYn != ""'>
        <if test='sRejectYn == "Y"'>
            AND A.ITEM_STAT_CD = 'RJCT'
        </if >
        <if test='sRejectYn == "N"'>
            AND A.ITEM_STAT_CD != 'RJCT'
        </if>
        </if>
        AND A.ITEM_STAT_CD != 'DEL'
        AND A.STOCK_ADJ_MVT_DOC_NO IS NULL
    ) A
    WHERE A.DIFF_QTY <![CDATA[>]]> 0
    ORDER BY A.DLR_CD ASC ,A.STOCK_DD_DOC_NO ASC ,A.STOCK_DD_DOC_LINE_NO ASC
    </select>

    <!-- 재고 실사 문서(Shortage 출고) 정보 Count를 조회한다. -->
    <select id="selectInvestigationForIssueByKeyCnt" resultType="int" parameterType="InvestigationSearchVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationForIssueByKeyCnt] */
    SELECT
        COUNT(*)
    FROM
    (
        SELECT
            A.DLR_CD
            ,A.STOCK_DD_DOC_NO
            ,A.STOCK_DD_DOC_LINE_NO
            ,B.STRGE_CD
            ,A.LOC_CD
            ,A.ITEM_CD
            ,A.ITEM_STAT_CD
            ,C.ITEM_NM
            ,C.ITEM_DSTIN_CD
            ,C.CARLINE_CD
            ,C.ABC_IND
            ,C.LAST_GR_DT
            ,C.LAST_GI_DT
            ,CASE WHEN NVL(A.BOOK_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0)
            ELSE NVL(A.BOOK_QTY, 0)
            END BOOK_QTY
            ,CASE WHEN NVL(A.DD_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0)
            ELSE A.DD_QTY
            END DD_QTY
            ,CASE WHEN NVL(A.BOOK_QTY, -999) = -999 THEN  NVL(D.AVLB_STOCK_QTY, 0) ELSE NVL(A.BOOK_QTY, 0)
            END
            - CASE WHEN NVL(A.DD_QTY, -999) = -999 THEN NVL(D.AVLB_STOCK_QTY, 0) ELSE  A.DD_QTY
            END
            AS DIFF_QTY
            ,NVL(C.MOVING_AVG_PRC, 0) AS MOVING_AVG_PRC
            ,A.UNIT_CD
            ,NVL(A.REASON_CONT, ' ') AS REASON_CONT
        FROM PT_0602T A
        INNER JOIN PT_0601T B ON B.DLR_CD = A.DLR_CD AND B.STOCK_DD_DOC_NO = A.STOCK_DD_DOC_NO
        INNER JOIN PT_0201T C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
        INNER JOIN PT_0301T D ON A.DLR_CD = D.DLR_CD AND A.STRGE_CD = D.STRGE_CD AND A.ITEM_CD  = D.ITEM_CD
        WHERE A.DLR_CD = #{sDlrCd}
        AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo}
        <if test='sRejectYn != null and sRejectYn != ""'>
            <if test='sRejectYn == "Y"'>
                AND A.ITEM_STAT_CD = 'RJCT'
            </if >
            <if test='sRejectYn == "N"'>
                AND A.ITEM_STAT_CD != 'RJCT'
            </if>
        </if>
        AND A.ITEM_STAT_CD != 'DEL'
        AND A.STOCK_ADJ_MVT_DOC_NO IS NULL
    ) A
    WHERE A.DIFF_QTY <![CDATA[>]]> 0
    </select>

    <!-- 재고실사등록 정보 Max 라인번호를 조회한다. -->
    <select id="selectInvestigationMaxLineNo" parameterType="InvestigationVO" resultType="int">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationMaxLineNo] */
    SELECT
        NVL(MAX(A.STOCK_DD_DOC_LINE_NO),0) + 1
    FROM PT_0602T A
    WHERE A.DLR_CD = #{dlrCd}
    AND A.STOCK_DD_DOC_NO = #{stockDdDocNo}
    </select>

     <!-- 재고실사등록 수정일자정보를 조회한다. -->
    <select id="selectInvestigationUpdtDtByKey" parameterType="InvestigationVO" resultType="String">
        /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationUpdtDtByKey] */
        SELECT  TO_CHAR(NVL(A.UPDT_DT,A.REG_DT), 'YYYYMMDDHH24MISS') AS UPDT_DT_STR
          FROM  DMSDB.PT_0601T A    --재고실사문서헤더정보
         WHERE  A.DLR_CD             = #{dlrCd}
           AND  A.STOCK_DD_DOC_NO    = #{stockDdDocNo}    --입고번호
    </select>

    <!-- 재고실사문서 상태를 조회한다. -->
    <select id="selectInvestigationStatusByKey" parameterType="InvestigationVO" resultType="String">
        /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationStatusByKey] */
        SELECT DOC_STAT_CD
          FROM PT_0601T A    --재고실사문서헤더정보
         WHERE A.DLR_CD          = #{dlrCd}
           AND A.STOCK_DD_DOC_NO = #{stockDdDocNo}
    </select>

    <!-- insertInvestigationItemNew. -->
    <insert id="insertInvestigationItemNew" parameterType="InvestigationItemVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.insertInvestigationItemNew] */
        MERGE INTO PT_0602T A
            USING ( SELECT #{dlrCd}                AS DLR_CD
                          ,#{stockDdDocNo}         AS STOCK_DD_DOC_NO
                          ,CASE WHEN NVL(#{stockDdDocLineNo}, 0) = 0 THEN (SELECT NVL(MAX(STOCK_DD_DOC_LINE_NO), 0) + 1 AS MAX_LINE_NO
                                                                             FROM PT_0602T
                                                                            WHERE DLR_CD = #{dlrCd}
                                                                              AND STOCK_DD_DOC_NO = #{stockDdDocNo})
                                ELSE #{stockDdDocLineNo}
                           END AS STOCK_DD_DOC_LINE_NO
                          ,#{itemStatCd}           AS ITEM_STAT_CD
                          ,#{locCd}                AS LOC_CD
                          ,#{itemCd}               AS ITEM_CD
                          ,#{bookQty}              AS BOOK_QTY
                          ,#{ddQty}                AS DD_QTY
                          ,#{unitCd}               AS UNIT_CD
                          ,#{reasonCont}           AS REASON_CONT
                          ,#{stockAdjMvtDocYyMm}   AS STOCK_ADJ_MVT_DOC_YY_MM
                          ,#{stockAdjMvtDocNo}     AS STOCK_ADJ_MVT_DOC_NO
                          ,#{stockAdjMvtDocLineNo} AS STOCK_ADJ_MVT_DOC_LINE_NO
                          ,#{strgeCd}              AS STRGE_CD
                          ,#{regUsrId}             AS REG_USR_ID
                          ,sysdate                 AS REG_DT
                      FROM DUAL
                  ) B
            ON ( A.DLR_CD          = B.DLR_CD
             AND A.STOCK_DD_DOC_NO = B.STOCK_DD_DOC_NO
             AND A.ITEM_CD         = B.ITEM_CD
             AND A.STRGE_CD        = B.STRGE_CD )
        WHEN MATCHED THEN
            UPDATE SET
                  A.ITEM_STAT_CD              = B.ITEM_STAT_CD
                 ,A.LOC_CD                    = B.LOC_CD
                 ,A.BOOK_QTY                  = B.BOOK_QTY
                 ,A.DD_QTY                    = B.DD_QTY
                 ,A.UNIT_CD                   = B.UNIT_CD
                 ,A.REASON_CONT               = B.REASON_CONT
                 ,A.STOCK_ADJ_MVT_DOC_YY_MM   = B.STOCK_ADJ_MVT_DOC_YY_MM
                 ,A.STOCK_ADJ_MVT_DOC_NO      = B.STOCK_ADJ_MVT_DOC_NO
                 ,A.STOCK_ADJ_MVT_DOC_LINE_NO = B.STOCK_ADJ_MVT_DOC_LINE_NO
                 ,A.REG_USR_ID                = B.REG_USR_ID
                 ,A.REG_DT                    = B.REG_DT
        WHEN NOT MATCHED THEN
            INSERT( A.DLR_CD
                   ,A.STOCK_DD_DOC_NO
                   ,A.STOCK_DD_DOC_LINE_NO
                   ,A.ITEM_STAT_CD
                   ,A.LOC_CD
                   ,A.ITEM_CD
                   ,A.BOOK_QTY
                   ,A.DD_QTY
                   ,A.UNIT_CD
                   ,A.REASON_CONT
                   ,A.STOCK_ADJ_MVT_DOC_YY_MM
                   ,A.STOCK_ADJ_MVT_DOC_NO
                   ,A.STOCK_ADJ_MVT_DOC_LINE_NO
                   ,A.STRGE_CD
                   ,A.REG_USR_ID
                   ,A.REG_DT
            )VALUES( B.DLR_CD
                    ,B.STOCK_DD_DOC_NO
                    ,B.STOCK_DD_DOC_LINE_NO
                    ,B.ITEM_STAT_CD
                    ,B.LOC_CD
                    ,B.ITEM_CD
                    ,B.BOOK_QTY
                    ,B.DD_QTY
                    ,B.UNIT_CD
                    ,B.REASON_CONT
                    ,B.STOCK_ADJ_MVT_DOC_YY_MM
                    ,B.STOCK_ADJ_MVT_DOC_NO
                    ,B.STOCK_ADJ_MVT_DOC_LINE_NO
                    ,B.STRGE_CD
                    ,B.REG_USR_ID
                    ,B.REG_DT
            )
    </insert>

    <!-- insertInvestigationHeaderAdd. -->
    <insert id="insertInvestigationHeaderAdd" parameterType="InvestigationItemVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.insertInvestigationItemAdd] */
    MERGE INTO PT_0601T A
            USING ( SELECT #{dlrCd}           AS DLR_CD
                          ,#{stockDdDocNo}    AS STOCK_DD_DOC_NO                <!-- 재고실사문서번호 -->
                          ,#{docStatCd}       AS DOC_STAT_CD                    <!-- 문서상태코드 -->
                          ,#{pltCd}           AS PLT_CD                         <!-- 센터코드 -->
                          ,#{strgeCd}         AS STRGE_CD                       <!-- 창고코드 -->
                          ,#{stockIvstPlanDt} AS STOCK_IVST_PLAN_DT             <!-- 재고조사계획일자 -->
                          ,#{prsnId}          AS PRSN_ID                        <!-- 담당자ID -->
                          ,#{prsnNm}          AS PRSN_NM                        <!-- 담당자명 -->
                          ,#{stockLockYn}     AS STOCK_LOCK_YN                  <!-- 재고통제여부 -->
                          ,#{remark}          AS REMARK                         <!-- 비고  -->
                          ,#{regUsrId}        AS REG_USR_ID
                          ,#{regDt}           AS REG_DT
                      FROM DUAL
                  ) B
            ON ( A.DLR_CD               = B.DLR_CD
             AND A.STOCK_DD_DOC_NO      = B.STOCK_DD_DOC_NO )
        WHEN MATCHED THEN
            UPDATE SET
                  A.DOC_STAT_CD        = B.DOC_STAT_CD
                 ,A.PLT_CD             = B.PLT_CD
                 ,A.STRGE_CD           = B.STRGE_CD
                 ,A.STOCK_IVST_PLAN_DT = B.STOCK_IVST_PLAN_DT
                 ,A.PRSN_ID            = B.PRSN_ID
                 ,A.PRSN_NM            = B.PRSN_NM
                 ,A.STOCK_LOCK_YN      = B.STOCK_LOCK_YN
                 ,A.REMARK             = B.REMARK
                 ,A.UPDT_USR_ID        = B.REG_USR_ID
                 ,A.UPDT_DT            = B.REG_DT
        WHEN NOT MATCHED THEN
            INSERT( A.DLR_CD
                   ,A.STOCK_DD_DOC_NO
                   ,A.DOC_STAT_CD
                   ,A.PLT_CD
                   ,A.STRGE_CD
                   ,A.STOCK_IVST_PLAN_DT
                   ,A.PRSN_ID
                   ,A.PRSN_NM
                   ,A.STOCK_LOCK_YN
                   ,A.REMARK
                   ,A.REG_USR_ID
                   ,A.REG_DT
            )VALUES( B.DLR_CD
                    ,B.STOCK_DD_DOC_NO
                    ,B.DOC_STAT_CD
                    ,B.PLT_CD
                    ,B.STRGE_CD
                    ,B.STOCK_IVST_PLAN_DT
                    ,B.PRSN_ID
                    ,B.PRSN_NM
                    ,B.STOCK_LOCK_YN
                    ,B.REMARK
                    ,B.REG_USR_ID
                    ,B.REG_DT
            )
    </insert>

    <select id="selectStockLockItem" resultType="int" parameterType="stockInOutVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.selectStockLockItem] */
        SELECT COUNT(*) AS CNT
          FROM PT_0301T A
         WHERE A.DLR_CD = #{dlrCd}
           AND A.PLT_CD = #{pltCd}
           AND A.STRGE_CD = #{strgeCd}
           AND A.ITEM_CD = #{itemCd}
           AND A.STOCK_LOCK_YN = 'Y'
    </select>

    <select id="selectStockLockItemList" resultType="int" parameterType="InvestigationVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.selectStockLockItemList] */
        SELECT COUNT(*) AS CNT
          FROM PT_0301T A
              INNER JOIN PT_0602T B ON A.DLR_CD = B.DLR_CD AND A.ITEM_CD = B.ITEM_CD AND A.STRGE_CD = B.STRGE_CD
         WHERE A.DLR_CD = #{dlrCd}
           AND A.PLT_CD = #{pltCd}
           AND A.STOCK_LOCK_YN = 'Y'
           AND B.STOCK_DD_DOC_NO = #{stockDdDocNo}
    </select>

    <!-- 현재고의 재고통제 정보를 수정한다. -->
    <update id="updateStockInOutByStockLockYn" parameterType="InvestigationVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDAO.updateStockInOutByStockLockYn] */
    UPDATE PT_0301T A
       SET A.STOCK_LOCK_YN = #{stockLockYn}
          ,A.UPDT_USR_ID = #{regUsrId}
          ,A.UPDT_DT = SYSDATE
     WHERE A.DLR_CD = #{dlrCd}
       AND A.PLT_CD = #{pltCd}
       AND (A.ITEM_CD, A.STRGE_CD) IN (SELECT ITEM_CD, STRGE_CD
                                         FROM PT_0602T
                                        WHERE DLR_CD = #{dlrCd}
                                          AND STOCK_DD_DOC_NO = #{stockDdDocNo})
    </update>

    <!-- 재고실사 부품 창고 목록을 조회한다. -->
    <select id="selectInvestigationStrgeByKey" parameterType="InvestigationSearchVO" resultType="InvestigationItemVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationStrgeByKey] */
    SELECT ROWNUM AS RNUM
          ,A.*
      FROM (
        SELECT A.DLR_CD
              ,A.STOCK_DD_DOC_NO
              ,A.STRGE_CD
              ,B.DOC_STAT_CD
              ,B.APPROVE_REQ_DT
          FROM PT_0602T A INNER JOIN PT_0601T B
            ON A.DLR_CD = B.DLR_CD
           AND A.STOCK_DD_DOC_NO = B.STOCK_DD_DOC_NO
         WHERE A.DLR_CD = #{sDlrCd}
           AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo}
           AND A.ITEM_STAT_CD != 'DEL'
        GROUP BY A.DLR_CD, A.STOCK_DD_DOC_NO, A.STRGE_CD, B.DOC_STAT_CD, B.APPROVE_REQ_DT
        ORDER BY A.STRGE_CD
        ) A
    </select>

    <!-- 재고실사 부품 창고 목록을 조회한다. -->
    <select id="selectInvestigationStrgeByKeyCnt" parameterType="InvestigationSearchVO" resultType="int">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationStrgeByKeyCnt] */
    SELECT COUNT(*)
      FROM (
        SELECT A.DLR_CD
              ,A.STOCK_DD_DOC_NO
              ,A.STRGE_CD
              ,B.DOC_STAT_CD
              ,B.APPROVE_REQ_DT
          FROM PT_0602T A INNER JOIN PT_0601T B
            ON A.DLR_CD = B.DLR_CD
           AND A.STOCK_DD_DOC_NO = B.STOCK_DD_DOC_NO
         WHERE A.DLR_CD = #{sDlrCd}
           AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo}
           AND A.ITEM_STAT_CD != 'DEL'
        GROUP BY A.DLR_CD, A.STOCK_DD_DOC_NO, A.STRGE_CD, B.DOC_STAT_CD, B.APPROVE_REQ_DT
        ORDER BY A.STRGE_CD
        )
    </select>

    <!-- 재고 실사 문서 정보를 창고별로 조회한다. -->
    <select id="selectInvestigationItemByStrge" parameterType="InvestigationSearchVO" resultType="InvestigationItemVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationItemByStrge] */
    SELECT
        A.*
    FROM
    (
        SELECT
            ROW_NUMBER() OVER(ORDER BY T.DLR_CD ASC ,T.STOCK_DD_DOC_NO ASC ,T.STOCK_DD_DOC_LINE_NO ASC) AS RNUM
            ,T.*
            ,CASE WHEN T.BOOK_QTY <![CDATA[>]]> 0 THEN T.DD_QTY - T.BOOK_QTY
            ELSE T.DD_QTY + T.BOOK_QTY
            END DIFF_QTY <!-- 차이수량 -->
            ,CASE WHEN T.BOOK_QTY <![CDATA[>]]> 0 THEN ROUND((NVL(T.DD_QTY,0) - NVL(T.BOOK_QTY,0)) * NVL(T.MOVING_AVG_PRC,0),2)
            ELSE ROUND((NVL(T.DD_QTY,0) + NVL(T.BOOK_QTY,0)) * NVL(T.MOVING_AVG_PRC,0),2)
            END AS AMT <!-- 차이금액 -->
        FROM(
            SELECT
                A.DLR_CD
                ,C.SPYR_CD AS BP_TP
                ,A.STOCK_DD_DOC_NO
                ,A.STOCK_DD_DOC_LINE_NO
                ,D.STRGE_CD
                ,A.LOC_CD
                ,A.ITEM_CD
                ,A.ITEM_STAT_CD
                ,C.ITEM_NM
                ,C.ITEM_DSTIN_CD
                ,C.CARLINE_CD
                ,C.ABC_IND
                ,C.LAST_GR_DT
                ,C.LAST_GI_DT
                ,CASE WHEN NVL(A.BOOK_QTY, -999) = -999 THEN (NVL(D.AVLB_STOCK_QTY,0) + NVL(D.RESV_STOCK_QTY,0) -  NVL(D.BORROW_QTY,0) + NVL(D.RENT_QTY,0))<!-- 장부수량 장면수량 대체 -->
                ELSE NVL(A.BOOK_QTY, 0)
                END BOOK_QTY<!-- 장부수량 -->
                ,CASE WHEN A.DD_QTY IS NULL THEN (NVL(D.AVLB_STOCK_QTY,0) + NVL(D.RESV_STOCK_QTY,0) -  NVL(D.BORROW_QTY,0) + NVL(D.RENT_QTY,0))<!-- 장면수량-->
                ELSE A.DD_QTY
                END AS DD_QTY<!-- 실사수량 -->
                ,CASE WHEN A.DD_QTY IS NULL THEN 0
                ELSE
                    CASE WHEN (A.DD_QTY - A.BOOK_QTY) <![CDATA[>]]> 0 THEN (A.DD_QTY - A.BOOK_QTY)
                    ELSE 0
                    END
                END AS STOCK_ITEM_PLUS_QTY<!-- 손익수량 -->
                ,CASE WHEN A.DD_QTY IS NULL THEN 0
                ELSE
                    CASE WHEN (A.DD_QTY - A.BOOK_QTY) <![CDATA[>]]> 0 THEN ROUND((A.DD_QTY - A.BOOK_QTY) * NVL(E.MOVING_AVG_PRC, NVL(C.MOVING_AVG_PRC,0)), 2)
                    ELSE 0
                    END
                END AS STOCK_ITEM_PLUS_PRC<!-- 손익금액 -->
                ,CASE WHEN A.DD_QTY IS NULL THEN 0
                ELSE
                    CASE WHEN (A.DD_QTY - A.BOOK_QTY) <![CDATA[<]]> 0 THEN ((A.DD_QTY - A.BOOK_QTY) * -1)
                    ELSE 0
                    END
                END AS STOCK_ITEM_MINUS_QTY<!-- 손실수량 -->
                ,CASE WHEN A.DD_QTY IS NULL THEN 0
                ELSE
                    CASE WHEN (A.DD_QTY - A.BOOK_QTY) <![CDATA[<]]> 0 THEN ROUND(((A.DD_QTY - A.BOOK_QTY) * -1) * NVL(E.MOVING_AVG_PRC, NVL(C.MOVING_AVG_PRC,0)), 2)
                    ELSE 0
                    END
                END AS STOCK_ITEM_MINUS_PRC<!-- 손실금액 -->
                ,NVL(E.MOVING_AVG_PRC, NVL(C.MOVING_AVG_PRC,0)) AS MOVING_AVG_PRC<!-- 이동평균단가 -->
                ,A.UNIT_CD
                ,NVL(A.REASON_CONT, ' ') AS REASON_CONT
                ,NVL(D.AVLB_STOCK_QTY,0) + NVL(D.RESV_STOCK_QTY,0) -  NVL(D.BORROW_QTY,0) + NVL(D.RENT_QTY,0) AS STOCK_QTY
                ,NVL(D.AVLB_STOCK_QTY,0) AS AVLB_STOCK_QTY
                ,NVL(D.RESV_STOCK_QTY,0) AS RESV_STOCK_QTY
                ,NVL(D.CLAM_STOCK_QTY,0) AS CLAM_STOCK_QTY
                ,NVL(D.GR_SCHE_QTY,0) AS GR_SCHE_QTY
                ,NVL(D.GI_SCHE_QTY,0) AS GI_SCHE_QTY
                ,NVL(D.BORROW_QTY,0) AS BORROW_QTY
                ,NVL(D.RENT_QTY,0) AS RENT_QTY
            FROM PT_0602T A
            INNER JOIN DMSDB.PT_0601T B ON B.DLR_CD = A.DLR_CD AND B.STOCK_DD_DOC_NO = A.STOCK_DD_DOC_NO
            INNER JOIN DMSDB.PT_0201T C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
            LEFT JOIN PT_0301T D ON A.DLR_CD = D.DLR_CD AND A.STRGE_CD = D.STRGE_CD AND A.ITEM_CD = D.ITEM_CD
            LEFT JOIN PT_0208T E ON A.DLR_CD  = E.DLR_CD AND A.STRGE_CD = E.STRGE_CD AND A.ITEM_CD = E.ITEM_CD
            WHERE A.DLR_CD = #{sDlrCd}
            AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo}
            AND A.STRGE_CD = #{sStrgeCd}
            AND A.ITEM_STAT_CD != 'DEL'
            <!-- 增加配件号查询条件   贾明 2018-4-9  start -->
            <if test='sItemCd != null and sItemCd != ""'>
                  AND A.ITEM_CD = #{sItemCd}
            </if>
            <!-- 增加配件号查询条件     贾明 2018-4-9  end -->
        )T
    ) A
    <where>
    <if test='firstIndex != -1 and lastIndex != -1'>
        RNUM <![CDATA[<=]]> #{lastIndex} AND RNUM <![CDATA[>]]> #{firstIndex}
    </if>
    </where>

    </select>

    <!-- 재고 실사 문서 정보를 창고별로 조회한다. -->
    <select id="selectInvestigationItemByStrgeCnt" resultType="int" parameterType="InvestigationSearchVO">
    /* [chn.bhmc.dms.par.stm.service.dao.InvestigationDao.selectInvestigationItemByStrgeCnt] */
    SELECT
        COUNT(*)
    FROM PT_0602T A
    INNER JOIN DMSDB.PT_0601T B ON B.DLR_CD = A.DLR_CD AND B.STOCK_DD_DOC_NO = A.STOCK_DD_DOC_NO
    INNER JOIN DMSDB.PT_0201T C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
    INNER JOIN PT_0301T D ON A.DLR_CD = D.DLR_CD AND A.STRGE_CD = D.STRGE_CD AND A.ITEM_CD  = D.ITEM_CD
    WHERE A.DLR_CD = #{sDlrCd}
    AND A.STOCK_DD_DOC_NO = #{sStockDdDocNo}
    AND A.STRGE_CD = #{sStrgeCd}
    AND A.ITEM_STAT_CD != 'DEL'
    </select>
    <!-- 校验导入的数据 --> 
   <select id="checkImportData" resultType="InvestigationItemVO" parameterType="InvestigationSearchVO">  
   select e.STRGE_NM
   ,g.LOC_CD
   ,g.LOC_CD_MIG
   ,a.ITEM_CD
   ,a.DLR_CD
   ,a.DD_QTY
   ,a.STRGE_CD from PT_0602T a 
   	   left join PT_0224T G ON A.DLR_CD = G.DLR_CD AND A.STRGE_CD = G.STRGE_CD AND A.ITEM_CD = G.ITEM_CD
       inner join CM_0104T e on a.DLR_CD = e.DLR_CD AND A.STRGE_CD = e.STRGE_CD
    where A.STOCK_DD_DOC_NO = #{sStockDdDocNo}
      <if test='sItemCd != null and sItemCd != ""'>
      AND A.ITEM_CD = #{sItemCd}
      </if>
      <if test='sDlrCd != null and sDlrCd != ""'>
      AND A.DLR_CD = #{sDlrCd}
      </if>
      <if test='sStrgeNm != null and sStrgeNm != ""'>
      AND e.STRGE_NM =  #{sStrgeNm}
      </if>
     <if test='sLocCdMig != null and sLocCdMig != ""'>
       AND g.LOC_CD_MIG = #{sLocCdMig}
     </if>
     <if test='sItemCd != null and sItemCd != "" and (sLocCdMig == null or sLocCdMig == "")'>
       AND g.LOC_CD_MIG is null 
     </if>
     <if test='sLocCd != null and sLocCd != ""'>
       AND a.loc_cd = #{sLocCd}
     </if>
      <if test='sItemCd != null and sItemCd != "" and (sLocCd == null or sLocCd == "")'>
       AND replace(A.LOC_CD, ' ', '') is null
     </if>
     order by a.ITEM_CD
  </select>
  
  <!-- 修改 -->
  <update id="updateBathByExcel" parameterType="InvestigationItemVO">
           UPDATE PT_0602T A set DD_QTY = #{excelDdQty}
            WHERE  A.STRGE_CD =  #{strgeCd}
               AND A.ITEM_CD = #{itemCd}
               AND A.STOCK_DD_DOC_NO = #{stockDdDocNo}
	           AND A.DLR_CD = #{dlrCd}
	       <if test='excelLocCd != null and excelLocCd != ""'>
	       		and A.LOC_CD = #{excelLocCd}
	       </if>
	       <if test='excelLocCd == null or excelLocCd == ""'>
	       		AND replace(A.LOC_CD, ' ', '') IS NULL
	       </if>
    </update>
</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    SQL File Name : StockMovStorageDAO_SqlMap.xml
    Description : 재고이동 헤더 관리.
    author In Bo Shim
    since 2016. 5. 12.
    version 1.0
    Modification Information
       since          author              description
    ===========    =============    ===========================
    2016. 05. 12.     In Bo Shim     최초 생성
-->

<mapper namespace="chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO">

    <!-- 재고이동 헤더 정보를 추가한다. -->
    <insert id="insertStockMovStorageHeader" parameterType="StockMovStorageHeaderVO">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.insertStockMovStorageHeader] */
    INSERT INTO PT_0631T(
        DLR_CD
        ,ETC_GI_DOC_NO
        ,STAT_CD
        ,MVT_TP
        ,PLT_CD
        ,STRGE_CD
        ,LOC_CD
        ,REMARK
        ,REG_USR_ID
        ,REG_DT
        ,UPDT_USR_ID
        ,UPDT_DT
    ) VALUES (
        #{ dlrCd }
        ,#{ etcGiDocNo }
        ,#{ statCd }
        ,#{ mvtTp }
        ,#{ pltCd }
        ,#{ strgeCd }
        ,#{ locCd }
        ,#{ remark }
        ,#{ regUsrId }
        ,SYSDATE
        ,#{ regUsrId }
        ,SYSDATE
    )
    </insert>

    <!-- 재고이동상세 정보를 추가한다. -->
    <insert id="insertStockMovStorageDetail" parameterType="StockMovStorageDetailVO">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.insertStockMovStorageDetail] */
    INSERT INTO PT_0632T(
        DLR_CD
        ,ETC_GI_DOC_NO
        ,ETC_GI_DOC_LINE_NO
        ,CANC_YN
        ,ITEM_CD
        ,QTY
        ,UNIT_CD
        ,GI_STRGE_CD
        ,GI_LOC_CD
        ,GR_STRGE_CD
        ,GR_LOC_CD
        ,GR_REASON_CD
        ,GI_STAT_CD
        ,MVT_DOC_YY_MM
        ,MVT_DOC_NO
        ,MVT_DOC_LINE_NO
        ,MOVING_AVG_PRC
        ,MOVING_AVG_AMT
        ,REG_USR_ID
        ,REG_DT
        ,UPDT_USR_ID
        ,UPDT_DT
    ) VALUES (
        #{ dlrCd }
        ,#{ etcGiDocNo }
        ,#{ etcGiDocLineNo }
        ,#{ cancYn }
        ,#{ itemCd }
        ,#{ strgeMoveStockQty }
        ,NVL(#{ unitCd }, 'EA')
        ,#{ giStrgeCd }
        ,#{ giLocCd }
        ,#{ grStrgeCd }
        ,#{ grLocCd }
        ,#{ grReasonCd }
        ,#{ giStatCd }
        ,#{ mvtDocYyMm}
        ,#{ mvtDocNo }
        ,#{ mvtDocLineNo }
        ,#{ movingAvgPrc }
        ,#{ movingAvgAmt }
        ,#{ regUsrId }
        ,SYSDATE
        ,#{ regUsrId }
        ,SYSDATE
    )
    </insert>

    <!-- 재고이동 헤더 정보를 수정한다. -->
    <update id="updateStockMovStorage" parameterType="StockMovStorageHeaderVO">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.updateStockMovStorage] */
    UPDATE PT_0631T SET
        STAT_CD = #{ statCd }
        ,REMARK = #{ remark }
        ,UPDT_USR_ID = #{ regUsrId }
        ,UPDT_DT = SYSDATE
    WHERE DLR_CD = #{dlrCd}
    AND ETC_GI_DOC_NO = #{etcGiDocNo}
    </update>

     <!-- 재고이동 헤더 정보를 취소처리한다. -->
    <update id="cancelStockMovStorage" parameterType="StockMovStorageHeaderVO">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.cancelStockMovStorage] */
    UPDATE PT_0631T SET
        STAT_CD = #{statCd}<!-- 상태코드 -->
        ,UPDT_USR_ID = #{regUsrId}
        ,UPDT_DT = sysdate
    WHERE DLR_CD = #{dlrCd}
    AND ETC_GI_DOC_NO = #{etcGiDocNo}<!-- 기타출고문서번호 -->
    </update>

     <!-- 재고이동 부품 정보를 확정처리한다. -->
    <update id="updateCnfmStockMovStorageItem" parameterType="StockMovStorageDetailVO">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.updateCnfmStockMovStorageItem] */
    UPDATE PT_0632T SET
        GI_STAT_CD = #{giStatCd}
        ,UNIT_CD   = #{unitCd}                     <!-- 단위 -->
        ,QTY       = #{strgeMoveStockQty}             <!-- 수량 -->
        ,MOVING_AVG_PRC = #{movingAvgPrc}       <!-- 이동평균가격 -->
        ,MOVING_AVG_AMT = #{movingAvgAmt}       <!-- 이동평균금액 -->
        ,GR_STRGE_CD = #{grStrgeCd}             <!-- 입고창고 -->
        ,GR_LOC_CD = #{grLocCd}                 <!-- 입고로케이션 -->
        ,GR_REASON_CD = #{grReasonCd}           <!-- 입고사유코드 -->
        ,UPDT_USR_ID = #{regUsrId}
        ,UPDT_DT = sysdate
    WHERE DLR_CD = #{dlrCd}
    AND ETC_GI_DOC_NO = #{etcGiDocNo}           <!-- 기타출고번호 -->
    AND ETC_GI_DOC_LINE_NO = #{etcGiDocLineNo}  <!-- 기타출고라인번호 -->
    </update>

    <!-- 재고이동 부품 정보를 수정한다. -->
    <update id="updateStockMovStorageItem" parameterType="StockMovStorageDetailVO">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.updateStockMovStorageItem] */
    UPDATE PT_0632T SET
        UNIT_CD = #{unitCd}                     <!-- 단위 -->
        ,QTY = #{strgeMoveStockQty}             <!-- 수량 -->
        ,MOVING_AVG_PRC = #{movingAvgPrc}       <!-- 이동평균가격 -->
        ,MOVING_AVG_AMT = #{movingAvgAmt}       <!-- 이동평균금액 -->
        ,GI_STRGE_CD = #{giStrgeCd}             <!-- 출고창고 -->
        ,GI_LOC_CD = #{giLocCd}                 <!-- 출고로케이션 -->
        ,GR_STRGE_CD = #{grStrgeCd}             <!-- 입고창고 -->
        ,GR_LOC_CD = #{grLocCd}                 <!-- 입고로케이션 -->
        ,GR_REASON_CD = #{grReasonCd}           <!-- 입고사유코드 -->
        ,UPDT_USR_ID = #{regUsrId}
        ,UPDT_DT = sysdate
    WHERE DLR_CD = #{dlrCd}
    AND ETC_GI_DOC_NO = #{etcGiDocNo}           <!-- 기타출고번호 -->
    AND ETC_GI_DOC_LINE_NO = #{etcGiDocLineNo}  <!-- 기타출고라인번호 -->
    </update>

     <!-- 재고이동 부품 정보를 삭제한다. -->
    <update id="deleteStockMovStorageItem" parameterType="StockMovStorageDetailVO">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.deleteStockMovStorageItem] */
    UPDATE PT_0632T SET
        CANC_YN = 'Y'                           <!-- 취소여부 -->
        ,GI_STAT_CD = #{giStatCd}               <!-- 취소상태(03) -->
        ,UPDT_USR_ID = #{regUsrId}
        ,UPDT_DT = sysdate
    WHERE DLR_CD = #{dlrCd}
    AND ETC_GI_DOC_NO = #{etcGiDocNo}           <!-- 기타출고번호 -->
    AND ETC_GI_DOC_LINE_NO  = #{etcGiDocLineNo} <!-- 기타출고라인번호 -->
    </update>

    <!-- 재고이동 부품 정보를 삭제한다.(수불발생안한 등록 부품 삭제) -->
    <delete id="deleteRegStockMovStorageItem" parameterType="StockMovStorageDetailVO">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.deleteRegStockMovStorageItem] */
    DELETE FROM PT_0632T
    WHERE DLR_CD = #{dlrCd}
    AND ETC_GI_DOC_NO = #{etcGiDocNo}           <!-- 기타출고번호-->
    AND ETC_GI_DOC_LINE_NO = #{etcGiDocLineNo}  <!-- 기타출고라인번호-->
    </delete>

    <!-- 재고이동 부품 정보의 수불 정보를 반영한다. -->
    <update id="updateStockMovStorageItemMvtInfo" parameterType="StockMovStorageDetailVO">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.updateStockMovStorageItemMvtInfo] */
    UPDATE PT_0632T SET
         MVT_DOC_YY_MM = #{mvtDocYyMm}               <!-- 수불문서년월 -->
        ,MVT_DOC_NO = #{mvtDocNo}                   <!-- 수불문서번호 -->
        ,MVT_DOC_LINE_NO = #{mvtDocLineNo}          <!-- 수불문서라인번호 -->
        ,MOVING_AVG_PRC = #{movingAvgPrc}       <!-- 이동평균가격 -->
        ,MOVING_AVG_AMT = #{movingAvgAmt}       <!-- 이동평균금액 -->
        ,UPDT_USR_ID = #{updtUsrId}
        ,UPDT_DT = sysdate
     WHERE DLR_CD = #{dlrCd}
    AND ETC_GI_DOC_NO = #{etcGiDocNo}            <!-- 기타출고번호  -->
    AND ETC_GI_DOC_LINE_NO = #{etcGiDocLineNo}   <!-- 기타출고라인번호 -->
    </update>

    <!-- 재고이동 헤더 정보를 조회한다. -->
    <select id="selectStockMovStorageHeaderByKey" parameterType="StockMovStorageSearchVO" resultType="StockMovStorageHeaderVO">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.selectStockMovStorageHeaderByKey] */
    SELECT
        A.DLR_CD
        ,A.ETC_GI_DOC_NO
        ,A.STAT_CD
        ,A.REG_DT
        ,A.MVT_TP
        ,B.ITEM_CNT
        ,B.ITEM_QTY
        ,B.ITEM_TOT_AMT
        ,A.REMARK
        ,A.REG_USR_ID
        ,(SELECT USR_NM FROM CM_0801T WHERE USR_ID = A.REG_USR_ID) AS REG_USR_NM
        ,TO_CHAR(NVL(A.UPDT_DT,A.REG_DT), 'YYYYMMDDHH24MISS') AS UPDT_DT_STR
    FROM PT_0631T A
    LEFT JOIN
    (
        SELECT
            A.DLR_CD
            ,A.ETC_GI_DOC_NO
            ,COUNT(*) AS ITEM_CNT
            ,SUM(NVL(A.QTY,0)) AS ITEM_QTY
            ,SUM(NVL(A.MOVING_AVG_PRC,0)) AS ITEM_TOT_AMT
        FROM PT_0632T A
        WHERE A.DLR_CD = #{sDlrCd}
        AND A.ETC_GI_DOC_NO = #{sEtcGiDocNo} <!-- 기타출고번호 -->
        AND A.CANC_YN != 'Y'
        AND A.GI_STAT_CD != '03'  <!-- 상태 -->
        GROUP BY A.DLR_CD ,A.ETC_GI_DOC_NO
    ) B ON A.DLR_CD = B.DLR_CD AND A.ETC_GI_DOC_NO = B.ETC_GI_DOC_NO
    WHERE A.DLR_CD = #{sDlrCd}
    AND A.ETC_GI_DOC_NO = #{sEtcGiDocNo}
    </select>

    <!-- 재고이동 부품 정보를 조회한다. -->
    <select id="selectStockMovStorageItemByKey" parameterType="StockMovStorageSearchVO" resultType="StockMovStorageDetailVO">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.selectStockMovStorageItemByKey] */
    SELECT
        A.DLR_CD
        ,A.ETC_GI_DOC_NO
        ,A.ETC_GI_DOC_LINE_NO
        ,A.ITEM_CD
        ,C.ITEM_NM
        ,C.ITEM_DSTIN_CD
        ,D.AVLB_STOCK_QTY
        ,A.GI_STRGE_CD                  <!-- 입고창고 -->
        ,A.GI_LOC_CD
        ,NVL(D.AVLB_STOCK_QTY,0) + NVL(D.RESV_STOCK_QTY,0) - NVL(D.BORROW_QTY,0) + NVL(D.RENT_QTY,0) AS GI_STOCK_QTY
        ,NVL(D.AVLB_STOCK_QTY,0) AS GI_AVLB_STOCK_QTY
        ,NVL(D.RESV_STOCK_QTY,0) AS GI_RESV_STOCK_QTY
        ,NVL(D.CLAM_STOCK_QTY,0) AS GI_CLAM_STOCK_QTY
        ,NVL(D.BORROW_QTY,0) AS GI_BORROW_QTY
        ,NVL(D.RENT_QTY,0) AS GI_RENT_QTY
        ,A.QTY AS STRGE_MOVE_STOCK_QTY  <!-- 이동수량 -->
        ,A.UNIT_CD
        ,A.GR_STRGE_CD                  <!-- 출고창고 -->
        ,A.GR_LOC_CD
        ,A.GR_REASON_CD
        ,A.REG_DT AS GI_DT
        ,TO_CHAR(A.REG_DT, 'HH24:MI:SS') AS GI_TIME
        ,A.MVT_DOC_YY_MM
        ,A.MVT_DOC_NO
        ,A.MVT_DOC_LINE_NO
        ,A.REG_USR_ID
        , CASE WHEN NVL(A.MOVING_AVG_PRC,0) <![CDATA[<>]]> NVL(G.MOVING_AVG_PRC,0) THEN NVL(G.MOVING_AVG_PRC,0)
        ELSE NVL(A.MOVING_AVG_PRC,0)
        END AS MOVING_AVG_PRC<!-- 이동평균가격 -->
        , CASE WHEN NVL(A.MOVING_AVG_PRC,0) <![CDATA[<>]]> NVL(G.MOVING_AVG_PRC,0) THEN NVL(G.MOVING_AVG_PRC,0) * A.QTY
        ELSE NVL(A.MOVING_AVG_PRC,0) * A.QTY
        END AS MOVING_AVG_AMT<!-- 이동평균금액 -->
    FROM PT_0632T A
    INNER JOIN PT_0631T B ON A.DLR_CD = B.DLR_CD AND A.ETC_GI_DOC_NO = B.ETC_GI_DOC_NO
    INNER JOIN PT_0201T C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
    LEFT JOIN PT_0301T D ON A.DLR_CD = D.DLR_CD AND A.GI_STRGE_CD = D.STRGE_CD AND A.ITEM_CD = D.ITEM_CD
    LEFT JOIN
    (
        SELECT
            DLR_CD
            ,ITEM_CD
            ,STRGE_CD
            ,MAX(PRC_TP) AS PRC_TP
            ,MAX(LINE_NO) AS LINE_NO
            ,MAX(NVL(RETL_PRC,0)) AS RETL_PRC
            ,MAX(NVL(WHSL_PRC,0)) AS WHSL_PRC
            ,MAX(NVL(SALE_PRC_AMT,0)) AS SALE_PRC_AMT
        FROM PT_0214T<!-- 부품가격관리 -->
        WHERE DLR_CD = #{sDlrCd}
        AND DEL_YN != 'Y'
        GROUP BY DLR_CD, STRGE_CD, ITEM_CD
    ) E ON A.DLR_CD = E.DLR_CD AND A.GI_STRGE_CD  = E.STRGE_CD AND A.ITEM_CD = E.ITEM_CD
    LEFT JOIN PT_0208T G ON A.DLR_CD = G.DLR_CD AND A.GI_STRGE_CD  = G.STRGE_CD AND A.ITEM_CD = G.ITEM_CD
    WHERE A.DLR_CD = #{sDlrCd}
    AND A.ETC_GI_DOC_NO    = #{sEtcGiDocNo}
    ORDER BY A.DLR_CD ,A.ETC_GI_DOC_NO DESC ,A.ETC_GI_DOC_LINE_NO
    </select>

    <!-- 기타출고 리스트정보를 조회한다. -->
    <select id="selectStockMovStorageByCondition" parameterType="StockMovStorageSearchVO" resultType="StockMovStorageHeaderVO">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.selectStockMovStorageByCondition] */
    SELECT A.*
    FROM
    (
        SELECT
            ROWNUM AS RNUM
            ,T1.*
        FROM
        (
            SELECT
                A.DLR_CD
                ,A.MVT_TP                <!-- 수불유형 -->
                ,A.ETC_GI_DOC_NO         <!-- 기타출고문서번호 -->
                ,A.STAT_CD               <!-- 상태코드 -->
                ,A.REG_DT
                ,A.REG_USR_ID
                ,A.REMARK
                ,B.ITEM_CNT
                ,B.ITEM_QTY
                ,TO_CHAR(NVL(A.UPDT_DT,A.REG_DT), 'YYYYMMDDHH24MISS') AS UPDT_DT_STR
            FROM PT_0631T A
            LEFT JOIN
            (
                SELECT
                    A.DLR_CD
                    ,A.ETC_GI_DOC_NO
                    ,COUNT(*) AS ITEM_CNT
                    ,SUM(NVL(A.QTY,0)) AS ITEM_QTY
                FROM PT_0632T A
                WHERE A.DLR_CD = #{sDlrCd}
                <if test='sEtcGiDocNo != null and sEtcGiDocNo != ""'>
                    AND A.ETC_GI_DOC_NO LIKE '%'||#{sEtcGiDocNo}||'%'
                </if><!-- 기타출고번호 -->
                AND A.CANC_YN != 'Y'
                AND A.GI_STAT_CD != '03'
                GROUP BY A.DLR_CD, A.ETC_GI_DOC_NO
            ) B ON A.DLR_CD = B.DLR_CD AND A.ETC_GI_DOC_NO = B.ETC_GI_DOC_NO
            WHERE A.DLR_CD = #{sDlrCd}
            AND A.STAT_CD != '03'
            <if test='sEtcGiDocNo != null and sEtcGiDocNo != ""'>
                AND A.ETC_GI_DOC_NO LIKE '%'||#{sEtcGiDocNo}||'%'
            </if>
            <if test='sMvtTp != null and sMvtTp != ""'> AND A.MVT_TP = #{sMvtTp} </if>
            <if test='sStatCd != null and sStatCd != ""'> AND A.STAT_CD = #{sStatCd} </if>
            <if test='sRegUsrId != null and sRegUsrId != ""'> AND A.REG_USR_ID like '%'||#{sRegUsrId} ||'%' </if>
            <if test='sRegDtFr != null'>
               AND A.REG_DT <![CDATA[>=]]> #{sRegDtFr}
            </if>
            <if test='sRegDtTo != null'>
               AND A.REG_DT <![CDATA[<=]]> #{sRegDtTo} + 1
            </if>
            ORDER BY
            <choose>
            <when test='sort != null'>
                <foreach item="item" index="index" collection="sort" open="" separator="," close="">
                <choose>
                    <when test='item.field == "etcGiDocNo"'> A.ETC_GI_DOC_NO <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "statCd"'> A.STAT_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "regDt"'> A.REG_DT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <otherwise>
                    A.DLR_CD ASC ,A.ETC_GI_DOC_NO DESC
                    </otherwise>
                </choose>
                </foreach>
            </when>
            <otherwise>
                A.DLR_CD ASC ,A.ETC_GI_DOC_NO DESC
            </otherwise>
            </choose>
        ) T1
    ) A
    <where>
        <if test='firstIndex != -1 and lastIndex != -1'>
            RNUM <![CDATA[<=]]> #{lastIndex} AND RNUM <![CDATA[>]]> #{firstIndex}
        </if>
    </where>
    </select>

    <!-- 기타출고 리스트정보를 조회한다. -->
    <select id="selectStockMovStorageByConditionCnt" parameterType="StockMovStorageSearchVO" resultType="int">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.selectStockMovStorageByConditionCnt] */
    SELECT
        COUNT(*)
    FROM PT_0631T A
    INNER JOIN
    (
        SELECT
            A.DLR_CD
            ,A.ETC_GI_DOC_NO
            ,COUNT(*) AS ITEM_CNT
        FROM PT_0632T A
        WHERE A.DLR_CD = #{sDlrCd}
        <if test='sEtcGiDocNo != null and sEtcGiDocNo != ""'>
            AND A.ETC_GI_DOC_NO LIKE '%'||#{sEtcGiDocNo}||'%'
        </if>
        AND A.CANC_YN != 'Y'
        AND A.GI_STAT_CD  != '03'
        GROUP BY A.DLR_CD ,A.ETC_GI_DOC_NO
    ) B ON A.DLR_CD = B.DLR_CD AND A.ETC_GI_DOC_NO = B.ETC_GI_DOC_NO
    WHERE A.DLR_CD = #{sDlrCd}
    AND A.STAT_CD != '03'
    <if test='sEtcGiDocNo != null and sEtcGiDocNo != ""'> AND A.ETC_GI_DOC_NO LIKE '%'||#{sEtcGiDocNo}||'%' </if>
    <if test='sMvtTp != null and sMvtTp != ""'> AND A.MVT_TP = #{sMvtTp} </if>
    <if test='sStatCd != null and sStatCd != ""'> AND A.STAT_CD = #{sStatCd} </if>
    <if test='sRegDtFr != null'>
        AND A.REG_DT <![CDATA[>=]]> #{sRegDtFr}
    </if>
    <if test='sRegDtTo != null'>
        AND A.REG_DT <![CDATA[<=]]> #{sRegDtTo} + 1
    </if>
    </select>

    <!-- 창고이동 집계정보를 조회한다. -->
    <select id="selectStockMovStorageListSummaryByCondition" parameterType="StockMovStorageSearchVO" resultType="StockMovStorageHeaderVO">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.selectStockMovStorageListSummaryByCondition] */
    SELECT
        A.*
    FROM
    (
        SELECT
            ROWNUM AS RNUM
            ,T1.*
        FROM
        (
            SELECT
                A.DLR_CD
                ,A.ETC_GI_DOC_NO
                ,A.MVT_TP
                ,A.STAT_CD              <!-- 입고상태코드 -->
                ,A.REG_DT AS GR_DT      <!-- 입고일자 -->
                ,A.REMARK
                ,A.REG_USR_ID
                ,(SELECT USR_NM FROM CM_0801T WHERE USR_ID = A.REG_USR_ID) AS REG_USR_NM   <!-- 등록자명 -->
                ,A.UPDT_USR_ID
                ,A.UPDT_DT
                ,NVL(B.ITEM_CNT, 0) AS ITEM_CNT<!-- 부품수 -->
                ,NVL(B.ITEM_QTY, 0) AS ITEM_QTY<!-- 부품수량 -->
                ,NVL(B.ITEM_TOT_AMT, 0) AS ITEM_TOT_AMT<!-- 부품총금액 -->
            FROM PT_0631T A <!-- 기타입고문서헤더정보 -->
            INNER JOIN (
                SELECT
                    A.DLR_CD
                    ,A.ETC_GI_DOC_NO
                    ,COUNT(*) AS ITEM_CNT
                    ,SUM(A.QTY) AS ITEM_QTY
                    ,SUM(A.MOVING_AVG_AMT) AS ITEM_TOT_AMT
                FROM PT_0632T A
                INNER JOIN PT_0631T B ON A.DLR_CD = B.DLR_CD AND A.ETC_GI_DOC_NO = B.ETC_GI_DOC_NO
                INNER JOIN PT_0201T C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
                WHERE A.DLR_CD = #{sDlrCd}
                AND A.CANC_YN != 'Y'
                <if test='sEtcGiDocNo != null and sEtcGiDocNo != ""'>
                    AND A.ETC_GI_DOC_NO LIKE '%'||#{sEtcGiDocNo}||'%'
                </if>
                <if test='sItemCd != null and sItemCd != ""'> AND A.ITEM_CD LIKE '%'|| #{sItemCd} ||'%' </if>
                <if test='sItemNm != null and sItemNm != ""'> AND C.ITEM_NM LIKE '%'|| #{sItemNm} ||'%' </if>
                <if test='sRegDtFr != null'>
                    AND A.REG_DT <![CDATA[>=]]> #{sRegDtFr}
                </if>
                <if test='sRegDtTo != null'>
                    AND A.REG_DT <![CDATA[<=]]> #{sRegDtTo} + 1
                </if>
                <if test='sGrStrgeCd != null and sGrStrgeCd != ""'> AND A.GR_STRGE_CD = #{sGrStrgeCd}   </if>
                <if test='sGiStrgeCd != null and sGiStrgeCd != ""'> AND A.GI_STRGE_CD = #{sGiStrgeCd}   </if>
                <if test='sStatCd != null and sStatCd != ""'> AND B.STAT_CD = #{sStatCd}               </if>
                GROUP BY A.DLR_CD ,A.ETC_GI_DOC_NO
            ) B ON A.DLR_CD = B.DLR_CD AND A.ETC_GI_DOC_NO  = B.ETC_GI_DOC_NO
            WHERE A.DLR_CD = #{sDlrCd}  --딜러코드
            <if test='sEtcGiDocNo != null and sEtcGiDocNo != ""'> AND A.ETC_GI_DOC_NO like '%'|| #{sEtcGiDocNo} ||'%' </if>
            <if test='sMvtTp != null and sMvtTp != ""'> AND A.MVT_TP = #{sMvtTp} </if>
            <if test='sStatCd != null and sStatCd != ""'> AND A.STAT_CD = #{sStatCd} </if>
            <if test='sRegUsrId != null and sRegUsrId != ""'> AND A.REG_USR_ID LIKE '%'|| #{sRegUsrId} ||'%' </if>
            <if test='sRegDtFr != null'>
               AND A.REG_DT <![CDATA[>=]]> #{sRegDtFr}
            </if>
            <if test='sRegDtTo != null'>
               AND A.REG_DT <![CDATA[<=]]> #{sRegDtTo} + 1
            </if>
            ORDER BY
            <choose>
            <when test='sort != null'>
                <foreach item="item" index="index" collection="sort" open="" separator="," close="">
                <choose>
                    <when test='item.field == "etcGiDocNo"'> A.ETC_GI_DOC_NO <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "statCd"'> A.STAT_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "grDt"'> A.REG_DT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "regUsrId"'> A.REG_USR_ID <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "itemCnt"'> B.ITEM_CNT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "itemQty"'>B.ITEM_QTY <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <otherwise>
                        A.DLR_CD ASC ,A.ETC_GI_DOC_NO DESC
                    </otherwise>
                </choose>
                </foreach>
            </when>
            <otherwise>
                A.DLR_CD ASC ,A.ETC_GI_DOC_NO DESC
            </otherwise>
            </choose>
        ) T1
    ) A
    <where>
        <if test='firstIndex != -1 and lastIndex != -1'>
            RNUM <![CDATA[<=]]> #{lastIndex} AND RNUM <![CDATA[>]]> #{firstIndex}
        </if>
    </where>
    </select>

    <!-- 창고이동 집계정보를 COUNT한다. -->
    <select id="selectStockMovStorageListSummaryByConditionCnt" parameterType="StockMovStorageSearchVO" resultType="int">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.selectStockMovStorageListSummaryByConditionCnt] */
    SELECT
        COUNT(*)
    FROM PT_0631T A
    INNER JOIN
    (
        SELECT
            A.DLR_CD
            ,A.ETC_GI_DOC_NO
            ,COUNT(*) AS ITEM_CNT
            ,SUM(A.QTY) AS ITEM_QTY
        FROM PT_0632T A
        INNER JOIN PT_0631T B ON A.DLR_CD = B.DLR_CD AND A.ETC_GI_DOC_NO = B.ETC_GI_DOC_NO
        INNER JOIN PT_0201T C ON A.DLR_CD  = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
        WHERE A.DLR_CD = #{sDlrCd}
        AND A.CANC_YN != 'Y'
        <if test='sEtcGiDocNo != null and sEtcGiDocNo != ""'>
            AND A.ETC_GI_DOC_NO LIKE '%'||#{sEtcGiDocNo}||'%'
        </if>
        <if test='sItemCd != null and sItemCd != ""'> AND A.ITEM_CD LIKE '%'|| #{sItemCd} ||'%' </if><!-- 품목번호 -->
        <if test='sItemNm != null and sItemNm != ""'> AND C.ITEM_NM LIKE '%'|| #{sItemNm} ||'%' </if><!-- 품목명 -->
        <if test='sRegDtFr != null'>
           AND A.REG_DT <![CDATA[>=]]> #{sRegDtFr}
        </if>
        <if test='sRegDtTo != null'>
           AND A.REG_DT <![CDATA[<=]]> #{sRegDtTo} + 1
        </if>
        <if test='sGrStrgeCd != null and sGrStrgeCd != ""'> AND A.GR_STRGE_CD = #{sGrStrgeCd}</if><!-- 입고창고코드-->
        <if test='sGiStrgeCd != null and sGiStrgeCd != ""'> AND A.GI_STRGE_CD = #{sGiStrgeCd}</if><!-- 입고창고코드-->
        <if test='sStatCd != null and sStatCd != ""'> AND B.STAT_CD = #{sStatCd}</if><!-- 입고상태코드 -->
        GROUP BY A.DLR_CD ,A.ETC_GI_DOC_NO
    ) B ON A.DLR_CD = B.DLR_CD AND A.ETC_GI_DOC_NO = B.ETC_GI_DOC_NO
    WHERE A.DLR_CD = #{sDlrCd}
    <if test='sEtcGiDocNo != null and sEtcGiDocNo != ""'> AND A.ETC_GI_DOC_NO like '%'|| #{sEtcGiDocNo} ||'%' </if><!-- 기타출고번호 -->
    <if test='sMvtTp != null and sMvtTp != ""'> AND A.MVT_TP    = #{sMvtTp} </if><!-- 수불유형 -->
    <if test='sStatCd != null and sStatCd != ""'> AND A.STAT_CD = #{sStatCd} </if><!-- 상태 -->
    <if test='sRegUsrId != null and sRegUsrId != ""'> AND A.REG_USR_ID like '%'||#{sRegUsrId} ||'%' </if> <!-- 등록자 -->
    <if test='sRegDtFr != null'>
       AND A.REG_DT <![CDATA[>=]]> #{sRegDtFr}
    </if>
    <if test='sRegDtTo != null'>
       AND A.REG_DT <![CDATA[<=]]> #{sRegDtTo} + 1
    </if>
    </select>

    <!-- 창고이동 명세정보를 조회한다. -->
    <select id="selectStockMovStorageDetailSummaryListByCondition" parameterType="StockMovStorageSearchVO" resultType="StockMovStorageDetailVO">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.selectStockMovStorageDetailSummaryListByCondition] */
    SELECT
        A.*
    FROM
    (
        SELECT
            ROWNUM AS RNUM
            ,T1.*
        FROM
        (
            SELECT
                A.DLR_CD
                ,A.ETC_GI_DOC_NO
                ,A.ETC_GI_DOC_LINE_NO
                ,A.ITEM_CD
                ,C.ITEM_NM
                ,A.QTY AS STRGE_MOVE_STOCK_QTY
                ,A.REG_DT AS GR_DT
                ,A.GR_STRGE_CD
                ,A.GR_LOC_CD
                ,A.GI_STRGE_CD
                ,A.GI_LOC_CD
                ,H.STRGE_NM AS GI_STRGE_NM
                ,F.LOC_NM AS GI_LOC_NM
                ,I.STRGE_NM AS GR_STRGE_NM
                ,G.LOC_NM AS GR_LOC_NM
                ,A.GR_REASON_CD
                ,A.GI_STAT_CD
                ,NVL(D.AVLB_STOCK_QTY,0) AS GI_AVLB_STOCK_QTY
                ,NVL(D.RESV_STOCK_QTY,0) AS GI_RESV_STOCK_QTY
                ,NVL(D.AVLB_STOCK_QTY,0) + NVL(D.RESV_STOCK_QTY,0) - NVL(D.BORROW_QTY,0) + NVL(D.RENT_QTY,0) AS GI_STOCK_QTY
                ,NVL(E.AVLB_STOCK_QTY,0) AS GR_AVLB_STOCK_QTY
                ,NVL(E.RESV_STOCK_QTY,0) AS GR_RESV_STOCK_QTY
                ,NVL(E.AVLB_STOCK_QTY,0) + NVL(E.RESV_STOCK_QTY,0) - NVL(E.BORROW_QTY,0) + NVL(E.RENT_QTY,0) AS GR_STOCK_QTY
                ,NVL(D.BORROW_QTY,0) AS GI_BORROW_QTY<!-- 출고차입  -->
                ,NVL(D.RENT_QTY,0) AS GI_RENT_QTY<!--출고차출 -->
                ,NVL(E.BORROW_QTY,0) AS GR_BORROW_QTY<!-- 입고차입  -->
                ,NVL(E.RENT_QTY,0) AS GR_RENT_QTY<!--입고차출 -->
            FROM PT_0632T A
            INNER JOIN DMSDB.PT_0631T B ON A.DLR_CD = B.DLR_CD AND A.ETC_GI_DOC_NO = B.ETC_GI_DOC_NO
            INNER JOIN DMSDB.PT_0201T C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
            LEFT JOIN PT_0301T D ON A.DLR_CD = D.DLR_CD AND A.ITEM_CD = D.ITEM_CD AND A.GI_STRGE_CD = D.STRGE_CD
            LEFT JOIN PT_0301T E ON A.DLR_CD = E.DLR_CD AND A.ITEM_CD = E.ITEM_CD AND A.GR_STRGE_CD = E.STRGE_CD
            LEFT JOIN PT_0222T F ON A.DLR_CD = F.DLR_CD AND B.PLT_CD = F.PLT_CD AND A.GI_STRGE_CD = F.STRGE_CD AND A.GI_LOC_CD = F.LOC_CD AND F.ITEM_CD IS NOT NULL
            LEFT JOIN PT_0222T G ON A.DLR_CD = G.DLR_CD AND B.PLT_CD = G.PLT_CD AND A.GR_STRGE_CD = G.STRGE_CD AND A.GR_LOC_CD = G.LOC_CD AND G.ITEM_CD IS NOT NULL
            LEFT JOIN CM_0104T H ON A.DLR_CD = H.DLR_CD AND B.PLT_CD = H.PLT_CD AND A.GI_STRGE_CD = H.STRGE_CD
            LEFT JOIN CM_0104T I ON A.DLR_CD = I.DLR_CD AND B.PLT_CD = I.PLT_CD AND A.GR_STRGE_CD = I.STRGE_CD
            WHERE A.DLR_CD = #{sDlrCd}
            AND A.CANC_YN != 'Y'
            <if test='sEtcGiDocNo != null and sEtcGiDocNo != ""'> AND A.ETC_GI_DOC_NO like '%'|| #{sEtcGiDocNo} ||'%' </if>
            <if test='sGrStrgeCd != null and sGrStrgeCd != ""'> AND A.GR_STRGE_CD = #{sGrStrgeCd} </if>
            <if test='sGiStrgeCd != null and sGiStrgeCd != ""'> AND A.GI_STRGE_CD = #{sGiStrgeCd} </if>
            <if test='sMvtTp != null and sMvtTp != ""'> AND B.MVT_TP = #{sMvtTp} </if>
            <if test='sStatCd != null and sStatCd != ""'> AND B.STAT_CD = #{sStatCd} </if>
            <if test='sRegUsrId != null and sRegUsrId != ""'> AND B.REG_USR_ID like '%'||#{sRegUsrId} ||'%' </if>
            <if test='sItemCd != null and sItemCd != ""'> AND A.ITEM_CD LIKE '%'|| #{sItemCd} ||'%' </if>
            <if test='sItemNm != null and sItemNm != ""'> AND C.ITEM_NM LIKE '%'|| #{sItemNm} ||'%' </if>
            <if test='sRegDtFr != null'>
                AND B.REG_DT <![CDATA[>=]]> #{sRegDtFr}
            </if>
            <if test='sRegDtTo != null'>
                AND B.REG_DT <![CDATA[<=]]> #{sRegDtTo} + 1
            </if>
            ORDER BY
            <choose>
            <when test='sort != null'>
                <foreach item="item" index="index" collection="sort" open="" separator="," close="">
                <choose>
                    <when test='item.field == "etcGiDocNo"'> A.ETC_GI_DOC_NO <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "grDt"'> B.REG_DT <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "itemCd"'> A.ITEM_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "itemNm"'> C.ITEM_NM <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "regUsrId"'> A.REG_USR_ID <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "qty"'> A.QTY <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "unitCd"'> A.UNIT_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "grStrgeCd"'> A.GR_STRGE_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "giStrgeCd"'> A.GI_STRGE_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "grLocCd"'> A.GR_LOC_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <when test='item.field == "giLocCd"'> A.GI_LOC_CD <choose><when test='item.dir == "asc"'>ASC</when><otherwise>DESC</otherwise></choose> </when>
                    <otherwise>
                        A.DLR_CD ASC, A.ETC_GI_DOC_NO DESC, A.ETC_GI_DOC_LINE_NO ASC
                    </otherwise>
                </choose>
                </foreach>
            </when>
            <otherwise>
                A.DLR_CD ASC ,A.ETC_GI_DOC_NO DESC ,A.ETC_GI_DOC_LINE_NO ASC
            </otherwise>
            </choose>
        ) T1
    ) A
    <where>
    <if test='firstIndex != -1 and lastIndex != -1'>
        RNUM <![CDATA[<=]]> #{lastIndex} AND RNUM <![CDATA[>]]> #{firstIndex}
    </if>
    </where>
    </select>

    <!-- 창고이동 명세정보를 COUNT한다. -->
    <select id="selectStockMovStorageDetailSummaryListByConditionCnt" parameterType="StockMovStorageSearchVO" resultType="int">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.selectStockMovStorageDetailSummaryListByConditionCnt] */
    SELECT
        COUNT(*)
    FROM PT_0632T A
    INNER JOIN PT_0631T B ON A.DLR_CD = B.DLR_CD AND A.ETC_GI_DOC_NO = B.ETC_GI_DOC_NO
    INNER JOIN PT_0201T C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD
    LEFT JOIN PT_0301T D ON A.DLR_CD = D.DLR_CD AND A.ITEM_CD = D.ITEM_CD AND A.GI_STRGE_CD = D.STRGE_CD
    LEFT JOIN PT_0301T E ON A.DLR_CD = E.DLR_CD AND A.ITEM_CD = E.ITEM_CD AND A.GR_STRGE_CD = E.STRGE_CD
    WHERE A.DLR_CD = #{sDlrCd}
    AND A.CANC_YN != 'Y'
    <if test='sEtcGiDocNo != null and sEtcGiDocNo != ""'> AND A.ETC_GI_DOC_NO like '%'|| #{sEtcGiDocNo} ||'%' </if>
    <if test='sGrStrgeCd != null and sGrStrgeCd != ""'> AND A.GR_STRGE_CD = #{sGrStrgeCd} </if>
    <if test='sGiStrgeCd != null and sGiStrgeCd != ""'> AND A.GI_STRGE_CD = #{sGiStrgeCd} </if>
    <if test='sMvtTp != null and sMvtTp != ""'> AND B.MVT_TP = #{sMvtTp} </if>
    <if test='sStatCd != null and sStatCd != ""'> AND B.STAT_CD = #{sStatCd} </if>
    <if test='sRegUsrId != null and sRegUsrId != ""'> AND B.REG_USR_ID like '%'||#{sRegUsrId} ||'%' </if>
    <if test='sItemCd != null and sItemCd != ""'> AND A.ITEM_CD LIKE '%'|| #{sItemCd} ||'%' </if>
    <if test='sItemNm != null and sItemNm != ""'> AND C.ITEM_NM LIKE '%'|| #{sItemNm} ||'%' </if>
    <if test='sRegDtFr != null'>
       AND B.REG_DT <![CDATA[>=]]> #{sRegDtFr}
    </if>
    <if test='sRegDtTo != null'>
       AND B.REG_DT <![CDATA[<=]]> #{sRegDtTo} + 1
    </if>
    </select>

    <!-- 부품재고이동 엑셀업로드 정보를 조회한다. -->
    <select id="selectStockMovStorageItemExcelUploadByKey" parameterType="StockMovStorageDetailVO" resultType="StockMovStorageDetailVO">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.selectStockMovStorageItemExcelUploadByKey] */
    SELECT
        A.DLR_CD
        ,A.ITEM_CD
        ,A.ITEM_NM
        ,A.STRGE_MOVE_STOCK_QTY
        ,A.EXCEL_QTY
        ,A.UNIT_CD
        ,A.GI_STRGE_CD
        ,A.GI_LOC_CD
        ,NVL(B.AVLB_STOCK_QTY,0) + NVL(B.RESV_STOCK_QTY,0) - NVL(B.BORROW_QTY,0) + NVL(B.RENT_QTY,0) AS GI_STOCK_QTY
        ,NVL(B.AVLB_STOCK_QTY,0) AS GI_AVLB_STOCK_QTY
        ,NVL(B.RESV_STOCK_QTY,0) AS GI_RESV_STOCK_QTY
        ,A.GR_STRGE_CD
        ,A.GR_LOC_CD
        ,NVL(C.AVLB_STOCK_QTY,0) + NVL(C.RESV_STOCK_QTY,0) - NVL(C.BORROW_QTY,0) + NVL(C.RENT_QTY,0) AS GR_STOCK_QTY
        ,NVL(C.AVLB_STOCK_QTY,0) AS GR_AVLB_STOCK_QTY
        ,NVL(C.RESV_STOCK_QTY,0) AS GR_RESV_STOCK_QTY
        ,A.GR_REASON_CD
        ,NVL(D.MOVING_AVG_PRC, A.MOVING_AVG_PRC) AS MOVING_AVG_PRC
    FROM
    (
        SELECT
            A.DLR_CD
            ,A.ITEM_CD
            ,A.ITEM_NM
            ,NVL(ROUND(#{excelQty},0), 0) AS STRGE_MOVE_STOCK_QTY
            ,NVL(ROUND(#{excelQty},0), 0) AS EXCEL_QTY
            ,A.STOCK_UNIT_CD AS UNIT_CD
            ,NVL(#{giStrgeCd},'') AS GI_STRGE_CD
            ,NVL(#{grStrgeCd},'') AS GR_STRGE_CD
            ,NVL(#{giLocCd},'') AS GI_LOC_CD
            ,NVL(#{grLocCd},'') AS GR_LOC_CD
            ,NVL(#{grReasonCd}, '') AS GR_REASON_CD
            ,A.MOVING_AVG_PRC
        FROM PT_0201T A
    ) A
    LEFT JOIN
    (
        SELECT
            DLR_CD
            ,ITEM_CD
            ,STRGE_CD
            ,NVL(AVLB_STOCK_QTY,0) + NVL(RESV_STOCK_QTY,0) - NVL(BORROW_QTY,0) + NVL(RENT_QTY,0) AS STOCK_QTY
            ,NVL(AVLB_STOCK_QTY,0) AS AVLB_STOCK_QTY
            ,NVL(BORROW_QTY,0) AS BORROW_QTY
            ,NVL(RENT_QTY,0) AS RENT_QTY
            ,NVL(CLAM_STOCK_QTY,0) AS CLAM_STOCK_QTY
            ,NVL(RESV_STOCK_QTY,0) AS RESV_STOCK_QTY
        FROM PT_0301T
        WHERE DLR_CD  = #{dlrCd} AND ITEM_CD = #{itemCd}
    ) B ON A.DLR_CD = B.DLR_CD AND A.ITEM_CD= B.ITEM_CD AND A.GI_STRGE_CD = B.STRGE_CD
    LEFT JOIN
    (
        SELECT
            DLR_CD
            ,ITEM_CD
            ,STRGE_CD
            ,NVL(AVLB_STOCK_QTY,0) + NVL(RESV_STOCK_QTY,0) - NVL(BORROW_QTY,0) + NVL(RENT_QTY,0) AS STOCK_QTY
            ,NVL(AVLB_STOCK_QTY,0) AS AVLB_STOCK_QTY
            ,NVL(BORROW_QTY,0) AS BORROW_QTY
            ,NVL(RENT_QTY,0) AS RENT_QTY
            ,NVL(CLAM_STOCK_QTY,0) AS CLAM_STOCK_QTY
            ,NVL(RESV_STOCK_QTY,0) AS RESV_STOCK_QTY
        FROM PT_0301T
        WHERE DLR_CD = #{dlrCd}
        AND ITEM_CD = #{itemCd}
    ) C ON A.DLR_CD = C.DLR_CD AND A.ITEM_CD = C.ITEM_CD AND A.GR_STRGE_CD = C.STRGE_CD
    LEFT JOIN PT_0208T D ON A.DLR_CD  = D.DLR_CD AND A.GI_STRGE_CD  = D.STRGE_CD AND A.ITEM_CD = D.ITEM_CD
    WHERE A.DLR_CD = #{dlrCd}
    AND A.ITEM_CD = #{itemCd}
    </select>

    <!-- 기타출고 정보 Max 라인번호+1 정보를 가져온다. -->
    <select id="selectStockMovStorageMaxLineNo" parameterType="StockMovStorageHeaderVO" resultType="int">
    /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.selectStockMovStorageMaxLineNo] */
    SELECT
        MAX(A.ETC_GI_DOC_LINE_NO) + 1
    FROM PT_0632T A    --창고이동부품정보
    WHERE A.DLR_CD = #{dlrCd}
    AND A.ETC_GI_DOC_NO = #{etcGiDocNo}
    </select>

    <!-- 재고이동 헤더 수정일자정보를 조회한다. -->
    <select id="selectStockMovStorageUpdtDtByKey" parameterType="StockMovStorageHeaderVO" resultType="String">
        /* [chn.bhmc.dms.par.stm.service.dao.StockMovStorageDAO.selectStockMovStorageUpdtDtByKey] */
        SELECT  TO_CHAR(NVL(A.UPDT_DT,A.REG_DT), 'YYYYMMDDHH24MISS') AS UPDT_DT_STR
          FROM  DMSDB.PT_0631T A    --재고이동헤더정보
         WHERE  A.DLR_CD             = #{dlrCd}
           AND  A.ETC_GI_DOC_NO      = #{etcGiDocNo}    --입고번호
    </select>

</mapper>